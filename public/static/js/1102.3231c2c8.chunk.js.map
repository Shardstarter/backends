{"version":3,"file":"static/js/1102.3231c2c8.chunk.js","mappings":"8TAAaA,EAAU,YCQjBC,EAAS,IAAIC,EAAAA,GAAOF,GA+BnB,IAAeG,EAAK,WAmBvB,SAAAA,EAAYC,EAAcC,EAAcC,EAAmBC,IAAgBC,EAAAA,EAAAA,GAAA,KAAAL,GAEvEM,KAAKL,KAAOA,EACZK,KAAKJ,KAAOA,EACZI,KAAKH,UAAYA,EACjBG,KAAKF,QAAUA,CACnB,CAIC,OAJAG,EAAAA,EAAAA,GAAAP,EAAA,EAAAQ,IAAA,cAAAC,MAED,SAAYC,EAAiBD,GACzBX,EAAOa,mBAAmBD,EAASJ,KAAKH,UAAWM,EACvD,KAACT,CAAA,CA7BsB,GAqCdY,EAAM,WAOf,SAAAA,EAAYC,IAAiBR,EAAAA,EAAAA,GAAA,KAAAO,IACzBE,EAAAA,EAAAA,IAAeR,KAAM,WAAYO,GAAY,IAC7CP,KAAKS,MAAQ,GACbT,KAAKU,YAAc,EACnBV,KAAKW,SAAW,IAAIC,WAAWL,EACnC,CAqDC,OArDAN,EAAAA,EAAAA,GAAAK,EAAA,EAAAJ,IAAA,OAAAW,IAED,WACI,OAAOC,EAAAA,EAAAA,IAAUd,KAAKS,MAC1B,GAAC,CAAAP,IAAA,SAAAW,IACD,WAAuB,OAAOb,KAAKU,WAAa,GAAC,CAAAR,IAAA,aAAAC,MAEjD,SAAWY,GAGP,OAFAf,KAAKS,MAAMO,KAAKD,GAChBf,KAAKU,aAAeK,EAAKE,OAClBF,EAAKE,MAChB,GAAC,CAAAf,IAAA,eAAAC,MAED,SAAae,GACT,OAAOlB,KAAKmB,YAAWC,EAAAA,EAAAA,IAAOF,EAAOT,OACzC,GAEA,CAAAP,IAAA,aAAAC,MACA,SAAWA,GACP,IAAIkB,GAAQC,EAAAA,EAAAA,IAASnB,GACfoB,EAAgBF,EAAMJ,OAASjB,KAAKO,SAI1C,OAHIgB,IACAF,GAAQD,EAAAA,EAAAA,IAAO,CAAEC,EAAOrB,KAAKW,SAASa,MAAMD,MAEzCvB,KAAKmB,WAAWE,EAC3B,GAAC,CAAAnB,IAAA,YAAAC,MAED,SAAUA,GACN,IAAIkB,GAAQC,EAAAA,EAAAA,IAASG,EAAAA,GAAAA,KAAetB,IAUpC,OATIkB,EAAMJ,OAASjB,KAAKO,UACpBf,EAAOkC,WAAW,sBAAuBjC,EAAAA,GAAAA,OAAAA,eAA8B,CACnEwB,OAAQjB,KAAKO,SACboB,OAAQN,EAAMJ,SAGlBI,EAAMJ,OAASjB,KAAKO,WACpBc,GAAQD,EAAAA,EAAAA,IAAO,CAAEpB,KAAKW,SAASa,MAAMH,EAAMJ,OAASjB,KAAKO,UAAWc,KAEjEA,CACX,GAEA,CAAAnB,IAAA,aAAAC,MACA,SAAWA,GACP,OAAOH,KAAKmB,WAAWnB,KAAK4B,UAAUzB,GAC1C,GAAC,CAAAD,IAAA,sBAAAC,MAED,WAAmB,IAAA0B,EAAA,KACTF,EAAS3B,KAAKS,MAAMQ,OAG1B,OAFAjB,KAAKS,MAAMO,KAAKhB,KAAKW,UACrBX,KAAKU,aAAeV,KAAKO,SAClB,SAACJ,GACJ0B,EAAKpB,MAAMkB,GAAUE,EAAKD,UAAUzB,EACxC,CACJ,KAACG,CAAA,CAjEc,GAoENwB,EAAM,WASf,SAAAA,EAAYf,EAAiBR,EAAmBwB,EAAyBC,IAAoBjC,EAAAA,EAAAA,GAAA,KAAA+B,IACzFtB,EAAAA,EAAAA,IAAeR,KAAM,SAASsB,EAAAA,EAAAA,IAASP,KACvCP,EAAAA,EAAAA,IAAeR,KAAM,WAAYO,GAAY,KAC7CC,EAAAA,EAAAA,IAAeR,KAAM,cAAe+B,IACpCvB,EAAAA,EAAAA,IAAeR,KAAM,aAAcgC,GAEnChC,KAAKiC,QAAU,CACnB,CAUC,OAVAhC,EAAAA,EAAAA,GAAA6B,EAAA,EAAA5B,IAAA,OAAAW,IAED,WAAqB,OAAOqB,EAAAA,EAAAA,IAAQlC,KAAKS,MAAQ,GAAC,CAAAP,IAAA,WAAAW,IAClD,WAAyB,OAAOb,KAAKiC,OAAS,GAE9C,CAAA/B,IAAA,SAAAC,MAOA,SAAOR,EAAcQ,GACjB,OAAIH,KAAKmC,YAAsBnC,KAAKmC,YAAYxC,EAAMQ,GAC/C2B,EAAOM,OAAOzC,EAAMQ,EAC/B,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAWwB,EAAgBV,EAAgBoB,GACvC,IAAIC,EAAgBC,KAAKC,KAAKvB,EAASjB,KAAKO,UAAYP,KAAKO,SAW7D,OAVIP,KAAKiC,QAAUK,EAAgBtC,KAAKS,MAAMQ,SACtCjB,KAAKgC,YAAcK,GAASrC,KAAKiC,QAAUhB,GAAUjB,KAAKS,MAAMQ,OAChEqB,EAAgBrB,EAEhBzB,EAAOkC,WAAW,qBAAsBjC,EAAAA,GAAAA,OAAAA,eAA8B,CAClEwB,OAAQjB,KAAKS,MAAMQ,OACnBU,OAAQ3B,KAAKiC,QAAUK,KAI5BtC,KAAKS,MAAMe,MAAMxB,KAAKiC,QAASjC,KAAKiC,QAAUK,EACzD,GAAC,CAAApC,IAAA,YAAAC,MAED,SAAUwB,GACN,OAAO,IAAIG,EAAO9B,KAAKS,MAAMe,MAAMxB,KAAKiC,QAAUN,GAAS3B,KAAKO,SAAUP,KAAKmC,YAAanC,KAAKgC,WACrG,GAAC,CAAA9B,IAAA,YAAAC,MAED,SAAUc,EAAgBoB,GACtB,IAAIhB,EAAQrB,KAAKyC,WAAW,EAAGxB,IAAUoB,GAGzC,OAFArC,KAAKiC,SAAWZ,EAAMJ,OAEfI,EAAMG,MAAM,EAAGP,EAC1B,GAAC,CAAAf,IAAA,YAAAC,MAED,WACI,OAAOsB,EAAAA,GAAAA,KAAezB,KAAK0C,UAAU1C,KAAKO,UAC9C,IAAC,EAAAL,IAAA,SAAAC,MAvCD,SAAcR,EAAcQ,GACxB,IAAIwC,EAAQhD,EAAKgD,MAAM,mBAEvB,OADIA,GAASC,SAASD,EAAM,KAAO,KAAMxC,EAASA,EAAM0C,YACjD1C,CACX,KAAC2B,CAAA,CA1Bc,G,iCCzINgB,EAAa,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAEtB,SAAAA,EAAYjD,GAAiB,OAAAE,EAAAA,EAAAA,GAAA,KAAA+C,GAAAG,EAAAE,KAAA,KACnB,UAAW,UAAWtD,GAAW,EAC3C,CAiBC,OAjBAI,EAAAA,EAAAA,GAAA6C,EAAA,EAAA5C,IAAA,eAAAC,MAED,WACI,MAAO,4CACX,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnB,IACIA,GAAQiD,EAAAA,EAAAA,IAAWjD,E,CACrB,MAAOkD,GACLrD,KAAKsD,YAAYD,EAAMjD,QAASD,E,CAEpC,OAAOe,EAAOqC,WAAWpD,EAC7B,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOJ,EAAAA,EAAAA,KAAWK,EAAAA,EAAAA,IAAWD,EAAOE,YAAYC,cAAe,IACnE,KAACb,CAAA,CArBqB,CAAQpD,GCFrBkE,EAAe,SAAAb,IAAAC,EAAAA,EAAAA,GAAAY,EAAAb,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAU,GAGxB,SAAAA,EAAYC,GAAY,IAAAhC,EAED,OAFC9B,EAAAA,EAAAA,GAAA,KAAA6D,IACpB/B,EAAAoB,EAAAE,KAAA,KAAMU,EAAMlE,KAAMkE,EAAMjE,UAAMkE,EAAWD,EAAM/D,UAC1C+D,MAAQA,EAAMhC,CACvB,CAYC,OAZA5B,EAAAA,EAAAA,GAAA2D,EAAA,EAAA1D,IAAA,eAAAC,MAED,WACI,OAAOH,KAAK6D,MAAME,cACtB,GAAC,CAAA7D,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnB,OAAOH,KAAK6D,MAAMG,OAAO9C,EAAQf,EACrC,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOxD,KAAK6D,MAAMI,OAAOT,EAC7B,KAACI,CAAA,CAlBuB,CAAQlE,GCD9BF,EAAS,IAAIC,EAAAA,GAAOF,GAKpB,SAAU2E,EAAKhD,EAAgBiD,EAA8BC,GAC/D,IAAIC,EAA0B,KAE9B,GAAIC,MAAMC,QAAQH,GACfC,EAAcD,OAEV,GAAIA,GAA6B,kBAAZA,EAAsB,CAC9C,IAAII,EAAwC,CAAC,EAE7CH,EAAcF,EAAOM,KAAI,SAACZ,GACtB,IAAMlE,EAAOkE,EAAMhE,UAmBnB,OAlBKF,GACDH,EAAOkC,WAAW,wDAAyDjC,EAAAA,GAAAA,OAAAA,iBAAgC,CACvGiF,SAAU,SACVb,MAAOA,EACP1D,MAAOiE,IAIXI,EAAO7E,IACPH,EAAOkC,WAAW,0DAA2DjC,EAAAA,GAAAA,OAAAA,iBAAgC,CACzGiF,SAAU,SACVb,MAAOA,EACP1D,MAAOiE,IAIfI,EAAO7E,IAAQ,EAERyE,EAAOzE,EAClB,G,MAGAH,EAAOa,mBAAmB,sBAAuB,QAAS+D,GAG1DD,EAAOlD,SAAWoD,EAAYpD,QAC9BzB,EAAOa,mBAAmB,8BAA+B,QAAS+D,GAGtE,IAAIO,EAAe,IAAIrE,EAAOY,EAAOX,UACjCqE,EAAgB,IAAItE,EAAOY,EAAOX,UAElCsE,EAAmD,GACvDV,EAAOW,SAAQ,SAACjB,EAAOkB,GACnB,IAAI5E,EAAQkE,EAAYU,GAExB,GAAIlB,EAAM/D,QAAS,CAEf,IAAIkF,EAAgBJ,EAAc3D,OAGlC4C,EAAMG,OAAOY,EAAezE,GAG5B,IAAI8E,EAAaN,EAAaO,sBAC9BL,EAAY7D,MAAK,SAACmE,GACdF,EAAWE,EAAaH,EAC5B,G,MAGAnB,EAAMG,OAAOW,EAAcxE,EAEnC,IAGA0E,EAAYC,SAAQ,SAACM,GAAWA,EAAKT,EAAa1D,OAAS,IAE3D,IAAIA,EAASC,EAAOmE,aAAaV,GAEjC,OADA1D,GAAUC,EAAOmE,aAAaT,EAElC,CAEM,SAAUU,EAAO9B,EAAgBW,GACnC,IAAIC,EAAc,GAGdmB,EAAa/B,EAAOgC,UAAU,GAElCrB,EAAOW,SAAQ,SAACjB,GACZ,IAAI1D,EAAa,KAEjB,GAAI0D,EAAM/D,QAAS,CACf,IAAI6B,EAAS6B,EAAOE,YAChB+B,EAAeF,EAAWC,UAAU7D,EAAOkB,YAC/C,IACI1C,EAAQ0D,EAAMI,OAAOwB,E,CACvB,MAAOpC,GAEL,GAAIA,EAAMqC,OAASjG,EAAAA,GAAAA,OAAAA,eAAgC,MAAM4D,GACzDlD,EAAQkD,GACFsC,SAAW9B,EAAMlE,KACvBQ,EAAMR,KAAOkE,EAAMhE,UACnBM,EAAMP,KAAOiE,EAAMjE,I,OAIvB,IACIO,EAAQ0D,EAAMI,OAAOT,E,CACvB,MAAOH,GAEL,GAAIA,EAAMqC,OAASjG,EAAAA,GAAAA,OAAAA,eAAgC,MAAM4D,GACzDlD,EAAQkD,GACFsC,SAAW9B,EAAMlE,KACvBQ,EAAMR,KAAOkE,EAAMhE,UACnBM,EAAMP,KAAOiE,EAAMjE,I,MAIdkE,GAAT3D,GACAiE,EAAOpD,KAAKb,EAEpB,IAGA,IAAMyF,EAAczB,EAAO0B,QAAO,SAACC,EAAOjC,GACtC,IAAMlE,EAAOkE,EAAMhE,UAKnB,OAJIF,IACKmG,EAAMnG,KAASmG,EAAMnG,GAAQ,GAClCmG,EAAMnG,MAEHmG,CACX,GAAiC,CAAC,GAGlC3B,EAAOW,SAAQ,SAACjB,EAAckB,GAC1B,IAAIpF,EAAOkE,EAAMhE,UACjB,GAAKF,GAA8B,IAAtBiG,EAAYjG,KAEZ,WAATA,IAAqBA,EAAO,WAEZ,MAAhByE,EAAOzE,IAAX,CAEA,IAAMQ,EAAQiE,EAAOW,GAEjB5E,aAAiB4F,MACjBC,OAAOC,eAAe7B,EAAQzE,EAAM,CAChCuG,YAAY,EACZrF,IAAK,WAAQ,MAAMV,CAAO,IAG9BiE,EAAOzE,GAAQQ,C,CAEvB,IAEA,IAFG,IAAAgG,EAAA,WAGC,IAAMhG,EAAQiE,EAAOgC,GACjBjG,aAAiB4F,OACjBC,OAAOC,eAAe7B,EAAQgC,EAAG,CAC7BF,YAAY,EACZrF,IAAK,WAAQ,MAAMV,CAAO,G,EAL7BiG,EAAI,EAAGA,EAAIhC,EAAOnD,OAAQmF,IAAGD,IAUtC,OAAOH,OAAOK,OAAOjC,EACzB,CAGO,IAAMkC,EAAW,SAAAvD,IAAAC,EAAAA,EAAAA,GAAAsD,EAAAvD,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAoD,GAIpB,SAAAA,EAAYzC,EAAc5C,EAAgBpB,GAAiB,IAAAgC,GAAA9B,EAAAA,EAAAA,GAAA,KAAAuG,GACvD,IAAM1G,EAAQiE,EAAMjE,KAAO,KAAOqB,GAAU,EAAIA,EAAQ,IAAM,IACxDnB,GAAuB,IAAZmB,GAAiB4C,EAAM/D,QAInB,OAHrB+B,EAAAoB,EAAAE,KAAA,KAAM,QAASvD,EAAMC,EAAWC,IAE3B+D,MAAQA,EACbhC,EAAKZ,OAASA,EAAOY,CACzB,CAsDC,OAtDA5B,EAAAA,EAAAA,GAAAqG,EAAA,EAAApG,IAAA,eAAAC,MAED,WAKI,IAHA,IAAMoG,EAAevG,KAAK6D,MAAME,eAE1ByC,EAAqB,GAClBJ,EAAI,EAAGA,EAAIpG,KAAKiB,OAAQmF,IAC7BI,EAAOxF,KAAKuF,GAEhB,OAAOC,CACX,GAAC,CAAAtG,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACdmE,MAAMC,QAAQpE,IACfH,KAAKsD,YAAY,uBAAwBnD,GAG7C,IAAIsG,EAAQzG,KAAKiB,QAEF,IAAXwF,IACAA,EAAQtG,EAAMc,OACdC,EAAOqC,WAAWpD,EAAMc,SAG5BzB,EAAOkH,mBAAmBvG,EAAMc,OAAQwF,EAAO,eAAiBzG,KAAKH,UAAY,IAAKG,KAAKH,UAAY,KAGvG,IADA,IAAIsE,EAAS,GACJiC,EAAI,EAAGA,EAAIjG,EAAMc,OAAQmF,IAAOjC,EAAOnD,KAAKhB,KAAK6D,OAE1D,OAAOK,EAAKhD,EAAQiD,EAAQhE,EAChC,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOqD,GACH,IAAIiD,EAAQzG,KAAKiB,QACF,IAAXwF,GAQY,IAPZA,EAAQjD,EAAOE,YAAYb,YAOVW,EAAO/C,MAAMQ,QAC1BzB,EAAOkC,WAAW,2BAA4BjC,EAAAA,GAAAA,OAAAA,eAA8B,CACxEwB,OAAQuC,EAAO/C,MAAMQ,OACrBwF,MAAOA,IAKnB,IADA,IAAItC,EAAS,GACJiC,EAAI,EAAGA,EAAIK,EAAOL,IAAOjC,EAAOnD,KAAK,IAAI4C,EAAe5D,KAAK6D,QAEtE,OAAOL,EAAOpB,OAAOpC,KAAKL,KAAM2F,EAAO9B,EAAQW,GACnD,KAACmC,CAAA,CAjEmB,CAAQ5G,GCpKnBiH,EAAa,SAAA5D,IAAAC,EAAAA,EAAAA,GAAA2D,EAAA5D,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAyD,GAEtB,SAAAA,EAAY9G,GAAiB,OAAAE,EAAAA,EAAAA,GAAA,KAAA4G,GAAA1D,EAAAE,KAAA,KACnB,OAAQ,OAAQtD,GAAW,EACrC,CAYC,OAZAI,EAAAA,EAAAA,GAAA0G,EAAA,EAAAzG,IAAA,eAAAC,MAED,WACI,OAAO,CACX,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnB,OAAOe,EAAOqC,WAAWpD,EAAQ,EAAG,EACxC,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOA,EAAOpB,OAAOpC,KAAKJ,MAAO4D,EAAOE,YAAYkD,SACxD,KAACD,CAAA,CAhBqB,CAAQjH,GCErBmH,EAAkB,SAAA9D,IAAAC,EAAAA,EAAAA,GAAA6D,EAAA9D,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAA2D,GAC3B,SAAAA,EAAYjH,EAAcC,GAAiB,OAAAE,EAAAA,EAAAA,GAAA,KAAA8G,GAAA5D,EAAAE,KAAA,KAClCvD,EAAMA,EAAMC,GAAW,EAChC,CAeC,OAfAI,EAAAA,EAAAA,GAAA4G,EAAA,EAAA3G,IAAA,eAAAC,MAED,WACI,MAAO,IACX,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnBA,GAAQmB,EAAAA,EAAAA,IAASnB,GACjB,IAAIc,EAASC,EAAOqC,WAAWpD,EAAMc,QAErC,OADAA,GAAUC,EAAO4F,WAAW3G,EAEhC,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOA,EAAOd,UAAUc,EAAOE,YAAYb,YAAY,EAC3D,KAACgE,CAAA,CAlB0B,CAAQnH,GAqB1BqH,EAAW,SAAAC,IAAAhE,EAAAA,EAAAA,GAAA+D,EAAAC,GAAA,IAAAC,GAAA/D,EAAAA,EAAAA,GAAA6D,GACpB,SAAAA,EAAYlH,GAAiB,OAAAE,EAAAA,EAAAA,GAAA,KAAAgH,GAAAE,EAAA9D,KAAA,KACnB,QAAStD,EACnB,CAIC,OAJAI,EAAAA,EAAAA,GAAA8G,EAAA,EAAA7G,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOA,EAAOpB,OAAOpC,KAAKL,MAAMuC,EAAAA,EAAAA,KAAOgF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAJ,EAAAK,WAAA,eAAAjE,KAAC,KAAaK,IACzD,KAACuD,CAAA,CAPmB,CAAQF,GCpBnBQ,EAAgB,SAAAtE,IAAAC,EAAAA,EAAAA,GAAAqE,EAAAtE,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAmE,GAGzB,SAAAA,EAAYC,EAAczH,GAAiB,IAAAgC,GAAA9B,EAAAA,EAAAA,GAAA,KAAAsH,GACvC,IAAI1H,EAAO,QAAU4H,OAAOD,GAEX,OADjBzF,EAAAoB,EAAAE,KAAA,KAAMxD,EAAMA,EAAME,GAAW,IACxByH,KAAOA,EAAKzF,CACrB,CAcC,OAdA5B,EAAAA,EAAAA,GAAAoH,EAAA,EAAAnH,IAAA,eAAAC,MAED,WACI,MAAQ,qEAAsEqH,UAAU,EAAG,EAAgB,EAAZxH,KAAKsH,KACxG,GAAC,CAAApH,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnB,IAAIY,GAAOO,EAAAA,EAAAA,IAASnB,GAEpB,OADIY,EAAKE,SAAWjB,KAAKsH,MAAQtH,KAAKsD,YAAY,wBAAyBnD,GACpEe,EAAO4F,WAAW/F,EAC7B,GAAC,CAAAb,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOA,EAAOpB,OAAOpC,KAAKL,MAAMuC,EAAAA,EAAAA,IAAQsB,EAAOd,UAAU1C,KAAKsH,OAClE,KAACD,CAAA,CArBwB,CAAQ3H,GCHxB+H,EAAU,SAAA1E,IAAAC,EAAAA,EAAAA,GAAAyE,EAAA1E,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAuE,GAEnB,SAAAA,EAAY5H,GAAiB,OAAAE,EAAAA,EAAAA,GAAA,KAAA0H,GAAAxE,EAAAE,KAAA,KACnB,OAAQ,GAAItD,GAAW,EACjC,CAcC,OAdAI,EAAAA,EAAAA,GAAAwH,EAAA,EAAAvH,IAAA,eAAAC,MAED,WACI,OAAO,IACX,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GAEnB,OADa,MAATA,GAAiBH,KAAKsD,YAAY,WAAYnD,GAC3Ce,EAAO4F,WAAW,GAC7B,GAAC,CAAA5G,IAAA,SAAAC,MAED,SAAOqD,GAEH,OADAA,EAAOd,UAAU,GACVc,EAAOpB,OAAOpC,KAAKL,KAAM,KACpC,KAAC8H,CAAA,CAlBkB,CAAQ/H,G,WCGlBgI,EAAY,SAAA3E,IAAAC,EAAAA,EAAAA,GAAA0E,EAAA3E,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAwE,GAIrB,SAAAA,EAAYJ,EAAcK,EAAiB9H,GAAiB,IAAAgC,GAAA9B,EAAAA,EAAAA,GAAA,KAAA2H,GACxD,IAAM/H,GAASgI,EAAS,MAAO,QAAkB,EAAPL,EAIrB,OAHrBzF,EAAAoB,EAAAE,KAAA,KAAMxD,EAAMA,EAAME,GAAW,IAExByH,KAAOA,EACZzF,EAAK8F,OAASA,EAAO9F,CACzB,CAqCC,OArCA5B,EAAAA,EAAAA,GAAAyH,EAAA,EAAAxH,IAAA,eAAAC,MAED,WACI,OAAO,CACX,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnB,IAAIyH,EAAInG,EAAAA,GAAAA,KAAetB,GAGnB0H,EAAeC,EAAAA,GAAAA,KAAkC,EAAlB5G,EAAOX,UAC1C,GAAIP,KAAK2H,OAAQ,CACb,IAAII,EAASF,EAAaG,KAAiB,EAAZhI,KAAKsH,KAAW,IAC3CM,EAAEK,GAAGF,IAAWH,EAAEM,GAAGH,EAAOI,IAAIC,EAAAA,IAAKC,IAAIC,EAAAA,OACzCtI,KAAKsD,YAAY,sBAAuBnD,E,MAErCyH,EAAEM,GAAGK,EAAAA,KAASX,EAAEK,GAAGJ,EAAaG,KAAiB,EAAZhI,KAAKsH,SACjDtH,KAAKsD,YAAY,sBAAuBnD,GAS5C,OANAyH,EAAIA,EAAEY,OAAmB,EAAZxI,KAAKsH,MAAUU,KAAiB,EAAZhI,KAAKsH,MAElCtH,KAAK2H,SACLC,EAAIA,EAAEa,SAAqB,EAAZzI,KAAKsH,MAAUkB,OAAO,EAAItH,EAAOX,WAG7CW,EAAOqC,WAAWqE,EAC7B,GAAC,CAAA1H,IAAA,SAAAC,MAED,SAAOqD,GACH,IAAIrD,EAAQqD,EAAOE,YAAYsE,KAAiB,EAAZhI,KAAKsH,MAMzC,OAJItH,KAAK2H,SACLxH,EAAQA,EAAMsI,SAAqB,EAAZzI,KAAKsH,OAGzB9D,EAAOpB,OAAOpC,KAAKL,KAAMQ,EACpC,KAACuH,CAAA,CA/CoB,CAAQhI,G,WCApBgJ,EAAY,SAAA1B,IAAAhE,EAAAA,EAAAA,GAAA0F,EAAA1B,GAAA,IAAA/D,GAAAC,EAAAA,EAAAA,GAAAwF,GAErB,SAAAA,EAAY7I,GAAiB,OAAAE,EAAAA,EAAAA,GAAA,KAAA2I,GAAAzF,EAAAE,KAAA,KACnB,SAAUtD,EACpB,CAYC,OAZAI,EAAAA,EAAAA,GAAAyI,EAAA,EAAAxI,IAAA,eAAAC,MAED,WACI,MAAO,EACX,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnB,OAAA+G,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAuB,EAAAtB,WAAA,eAAAjE,KAAA,KAAoBjC,GAAQyH,EAAAA,EAAAA,IAAYxI,GAC5C,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOoF,EAAAA,EAAAA,KAAY1B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAuB,EAAAtB,WAAA,eAAAjE,KAAC,KAAaK,GACrC,KAACkF,CAAA,CAhBoB,CAAQ7B,GCFpBgC,EAAW,SAAA9F,IAAAC,EAAAA,EAAAA,GAAA6F,EAAA9F,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAA2F,GAGpB,SAAAA,EAAY1E,EAAsBtE,GAAiB,IAAAgC,GAAA9B,EAAAA,EAAAA,GAAA,KAAA8I,GAC/C,IAAI/I,GAAU,EACRgJ,EAAuB,GAC7B3E,EAAOW,SAAQ,SAACjB,GACRA,EAAM/D,UAAWA,GAAU,GAC/BgJ,EAAM9H,KAAK6C,EAAMjE,KACrB,IACA,IAAMA,EAAQ,SAAWkJ,EAAMC,KAAK,KAAO,IAGtB,OADrBlH,EAAAoB,EAAAE,KAAA,KAAM,QAASvD,EAAMC,EAAWC,IAC3BqE,OAASA,EAAOtC,CACzB,CAuCC,OAvCA5B,EAAAA,EAAAA,GAAA4I,EAAA,EAAA3I,IAAA,eAAAC,MAED,WACI,IAAMiE,EAAc,GACpBpE,KAAKmE,OAAOW,SAAQ,SAACjB,GACjBO,EAAOpD,KAAK6C,EAAME,eACtB,IAGA,IAAM6B,EAAc5F,KAAKmE,OAAO0B,QAAO,SAACC,EAAOjC,GAC3C,IAAMlE,EAAOkE,EAAMhE,UAKnB,OAJIF,IACKmG,EAAMnG,KAASmG,EAAMnG,GAAQ,GAClCmG,EAAMnG,MAEHmG,CACX,GAAiC,CAAC,GAclC,OAXA9F,KAAKmE,OAAOW,SAAQ,SAACjB,EAAckB,GAC/B,IAAIpF,EAAOkE,EAAMhE,UACZF,GAA8B,IAAtBiG,EAAYjG,KAEZ,WAATA,IAAqBA,EAAO,WAEZ,MAAhByE,EAAOzE,KAEXyE,EAAOzE,GAAQyE,EAAOW,IAC1B,IAEOiB,OAAOK,OAAOjC,EACzB,GAAC,CAAAlE,IAAA,SAAAC,MAED,SAAOe,EAAgBf,GACnB,OAAO+D,EAAKhD,EAAQlB,KAAKmE,OAAQhE,EACrC,GAAC,CAAAD,IAAA,SAAAC,MAED,SAAOqD,GACH,OAAOA,EAAOpB,OAAOpC,KAAKL,KAAM2F,EAAO9B,EAAQxD,KAAKmE,QACxD,KAAC0E,CAAA,CArDmB,CAAQnJ,GCE1BF,EAAS,IAAIC,EAAAA,GAAOF,GA0BpByJ,EAAoB,CAAC,EAqBvBC,EAAgD,CAAEC,UAAU,EAAMC,QAAQ,EAAMC,SAAS,GACzFC,EAA+C,CAAEH,UAAU,EAAMC,QAAQ,GAC7E,SAASG,EAAc1J,EAAcD,GACjC,GAAa,UAATC,GAA6B,WAATA,GACpB,GAAIqJ,EAAetJ,GAAS,OAAO,OAChC,GAAa,YAATC,GACP,GAAa,YAATD,EAAsB,OAAO,OAC9B,IAAIC,EAAK2J,QAAQ,MAAQ,GAAc,UAAT3J,IAC7ByJ,EAAc1J,GAAS,OAAO,EAKtC,OAHIsJ,EAAetJ,IAAkB,YAATA,IACxBH,EAAOa,mBAAmB,mBAAoB,OAAQV,IAEnD,CACX,CAkKA,SAAS6J,EAASC,EAAaC,GAC3B,IAAK,IAAIxJ,KAAOwJ,GAAUlJ,EAAAA,EAAAA,IAAeiJ,EAAQvJ,EAAKwJ,EAAOxJ,GACjE,CAEO,IAAMyJ,EAA4C3D,OAAOK,OAAO,CAEnEuD,QAAS,UAGTC,QAAS,UAGTC,KAAM,OAGNC,KAAM,SAGJC,EAAiB,IAAIC,OAAO,sBAErBC,EAAS,WA0BlB,SAAAA,EAAYC,EAAuBT,IAAW3J,EAAAA,EAAAA,GAAA,KAAAmK,GACtCC,IAAqBnB,GAAqBxJ,EAAOkC,WAAW,iBAAkBjC,EAAAA,GAAAA,OAAAA,sBAAqC,CACnH2K,UAAW,oBAEfZ,EAASxJ,KAAM0J,GAEf,IAAI/G,EAAQ3C,KAAKJ,KAAK+C,MAAMqH,GAExBR,EAASxJ,KADT2C,EACe,CACX0H,YAAazH,SAASD,EAAM,IAAM,MAClC2H,cAAeJ,EAAUK,WAAW,CAChC3K,KAAM+C,EAAM,GACZ6H,WAAYxK,KAAKwK,aAErB7E,SAAU,SAGC,CACX0E,YAAa,KACbC,cAAe,KACf3E,SAA+B,MAAnB3F,KAAKwK,WAAsB,QAASxK,KAAKJ,OAI7DI,KAAKyK,cAAe,EAEpBzE,OAAOK,OAAOrG,KAClB,CAsFC,OAjFDC,EAAAA,EAAAA,GAAAiK,EAAA,EAAAhK,IAAA,SAAAC,MACA,SAAOuK,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACblL,EAAOa,mBAAmB,sBAAuB,SAAUqK,GAG3DA,IAAWf,EAAYI,KAAM,CAC7B,IAAIvD,EAAc,CACd5G,KAA0B,UAAlBI,KAAK2F,SAAwB,QAAS3F,KAAKJ,KACnDD,KAAOK,KAAKL,WAAQmE,GAMxB,MAJ6B,mBAAlB9D,KAAK2K,UAA0BnE,EAAOmE,QAAU3K,KAAK2K,SAC5D3K,KAAKwK,aACLhE,EAAOgE,WAAaxK,KAAKwK,WAAW/F,KAAI,SAACmG,GAAI,OAAKC,KAAKC,MAAMF,EAAKF,OAAOA,GAAQ,KAE9EG,KAAKE,UAAUvE,E,CAG1B,IAAIA,EAAS,GA0Bb,MAvBsB,UAAlBxG,KAAK2F,UACLa,GAAUxG,KAAKsK,cAAcI,OAAOA,GACpClE,GAAU,KAAOxG,KAAKqK,YAAc,EAAI,GAAI9C,OAAOvH,KAAKqK,cAAgB,KAElD,UAAlBrK,KAAK2F,UACD+E,IAAWf,EAAYC,UACvBpD,GAAUxG,KAAKJ,MAEnB4G,GAAU,IAAMxG,KAAKwK,WAAW/F,KAC5B,SAACmG,GAAI,OAAKA,EAAKF,OAAOA,EAAO,IAC/B3B,KAAM2B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAEpDtD,GAAUxG,KAAKJ,KAInB8K,IAAWf,EAAYC,WACF,IAAjB5J,KAAK2K,UAAoBnE,GAAU,YACnCkE,IAAWf,EAAYG,MAAQ9J,KAAKL,OACpC6G,GAAU,IAAMxG,KAAKL,OAItB6G,CACX,IAAC,EAAAtG,IAAA,OAAAC,MAED,SAAYA,EAA8C6K,GACtD,MAAsB,kBAAX7K,EACA+J,EAAUe,WAAW9K,EAAO6K,GAEhCd,EAAUK,WAAWpK,EAChC,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GACd,OAAI+J,EAAUgB,YAAY/K,GAAiBA,EAEpC,IAAI+J,EAAUlB,EAAmB,CACpCrJ,KAAOQ,EAAMR,MAAQ,KACrBC,KAAMuL,GAAWhL,EAAMP,MACvB+K,QAA4B,MAAjBxK,EAAMwK,QAAmB,OAAQxK,EAAMwK,QAClDH,WAAarK,EAAMqK,WAAarK,EAAMqK,WAAW/F,IAAIyF,EAAUK,YAAa,MAEpF,GAAC,CAAArK,IAAA,aAAAC,MAED,SAAkBA,EAAe6K,GAU7B,OATqBI,EAhT7B,SAAwBC,EAAeL,GAEnC,IAAIM,EAAgBD,EACpB,SAAS3J,EAAW0E,GAChB5G,EAAOa,mBAAmB,oCAADe,OAAsCgF,GAAM,QAASiF,EAClF,CAGA,SAASE,EAAQC,GACb,IAAIJ,EAAkB,CAAExL,KAAM,GAAID,KAAM,GAAI6L,OAAQA,EAAQC,MAAO,CAAEC,WAAW,IAEhF,OADIV,IAAgBI,EAAKT,SAAU,GAC5BS,CACX,CANAC,EAAQA,EAAMM,QAAQ,MAAO,KAW7B,IAHA,IAAIH,EAAoB,CAAE5L,KAAM,GAAID,KAAM,GAAI8L,MAAO,CAAEC,WAAW,IAC9DN,EAAOI,EAEFpF,EAAI,EAAGA,EAAIiF,EAAMpK,OAAQmF,IAAK,CACnC,IAAIwF,EAAIP,EAAMjF,GACd,OAAQwF,GACJ,IAAK,IACGR,EAAKK,MAAMC,WAA2B,KAAdN,EAAKxL,KAC7BwL,EAAKxL,KAAO,QACJwL,EAAKK,MAAMI,aACnBnK,EAAW0E,GAEfgF,EAAKK,MAAMC,WAAY,EACvBN,EAAKxL,KAAOuL,GAAWC,EAAKxL,MAC5BwL,EAAKZ,WAAa,CAAEe,EAAQH,IAC5BA,EAAOA,EAAKZ,WAAW,GACvB,MAEJ,IAAK,WACMY,EAAKK,MAEM,YAAdL,EAAKzL,OACAqL,GAAgBtJ,EAAW0E,GAChCgF,EAAKT,SAAU,EACfS,EAAKzL,KAAO,IAGZ2J,EAAc8B,EAAKxL,KAAMwL,EAAKzL,QAASyL,EAAKzL,KAAO,IAEvDyL,EAAKxL,KAAOuL,GAAWC,EAAKxL,MAE5B,IAAIkM,EAAQV,GACZA,EAAOA,EAAKI,SACC9J,EAAW0E,UACjB0F,EAAMN,OACbJ,EAAKK,MAAMI,aAAc,EACzBT,EAAKK,MAAMM,WAAY,EACvBX,EAAKK,MAAMO,YAAa,EACxB,MAEJ,IAAK,WACMZ,EAAKK,MAEM,YAAdL,EAAKzL,OACAqL,GAAgBtJ,EAAW0E,GAChCgF,EAAKT,SAAU,EACfS,EAAKzL,KAAO,IAGZ2J,EAAc8B,EAAKxL,KAAMwL,EAAKzL,QAASyL,EAAKzL,KAAO,IAEvDyL,EAAKxL,KAAOuL,GAAWC,EAAKxL,MAE5B,IAAIqM,EAAqBV,EAAQH,EAAKI,QAEtCJ,EAAKI,OAAOhB,WAAWxJ,KAAKiL,UACrBb,EAAKI,OACZJ,EAAOa,EACP,MAGJ,IAAK,IAGGb,EAAKK,MAAMC,WACO,KAAdN,EAAKxL,OACLwL,EAAKxL,KAAOuL,GAAWC,EAAKxL,aACrBwL,EAAKK,MAAMC,UAClBN,EAAKK,MAAMM,WAAY,EACvBX,EAAKK,MAAMI,aAAc,GAK7BT,EAAKK,MAAMM,WACO,KAAdX,EAAKzL,OACa,YAAdyL,EAAKzL,MACAqL,GAAgBtJ,EAAW0E,GAC5BgF,EAAKT,SAAWjJ,EAAW0E,GAC/BgF,EAAKT,SAAU,EACfS,EAAKzL,KAAO,IACL2J,EAAc8B,EAAKxL,KAAMwL,EAAKzL,MACrCyL,EAAKzL,KAAO,GAEZyL,EAAKK,MAAMM,WAAY,GAKnC,MAEJ,IAAK,IACIX,EAAKK,MAAMO,YAActK,EAAW0E,GAEzCgF,EAAKxL,MAAQgM,EAEbR,EAAKK,MAAMO,YAAa,EACxBZ,EAAKK,MAAMM,WAAY,EACvBX,EAAKK,MAAMS,WAAY,EACvB,MAEJ,IAAK,IACId,EAAKK,MAAMS,WAAaxK,EAAW0E,GAExCgF,EAAKxL,MAAQgM,EAEbR,EAAKK,MAAMS,WAAY,EACvBd,EAAKK,MAAMO,YAAa,EACxBZ,EAAKK,MAAMM,WAAY,EACvB,MAEJ,QACQX,EAAKK,MAAMC,WACXN,EAAKxL,MAAQgM,EACbR,EAAKK,MAAMI,aAAc,EACzBT,EAAKK,MAAMO,YAAa,GACjBZ,EAAKK,MAAMM,WAClBX,EAAKzL,MAAQiM,SACNR,EAAKK,MAAMO,YACXZ,EAAKK,MAAMS,UAClBd,EAAKxL,MAAQgM,EAEblK,EAAW0E,G,CAoB3B,OAfIgF,EAAKI,QAAUhM,EAAOa,mBAAmB,iBAAkB,QAASgL,UAEjEG,EAAOC,MAEI,YAAdL,EAAKzL,MACAqL,GAAgBtJ,EAAW4J,EAAcrK,OAAS,GACnDmK,EAAKT,SAAWjJ,EAAW4J,EAAcrK,OAAS,GACtDmK,EAAKT,SAAU,EACfS,EAAKzL,KAAO,IACL2J,EAAc8B,EAAKxL,KAAMwL,EAAKzL,QACrCyL,EAAKzL,KAAO,IAGhB6L,EAAO5L,KAAOuL,GAAWK,EAAO5L,MAEzB4L,CACX,CA4J2BW,CAAehM,IAAS6K,GARhCd,EAAUK,WAAW,CACxB5K,KAAMyL,EAAKzL,KACXC,KAAMwL,EAAKxL,KACX+K,QAASS,EAAKT,QACdH,WAAYY,EAAKZ,aALzB,IAAqBY,CAUzB,GAAC,CAAAlL,IAAA,cAAAC,MAED,SAAmBA,GACf,QAAmB,MAATA,IAAiBA,EAAMsK,aACrC,KAACP,CAAA,CA3IiB,GA8ItB,SAASkC,EAAYjM,EAAekM,GAChC,OAyoBJ,SAAsBlM,GAClBA,EAAQA,EAAMmM,OAKd,IAHA,IAAI9F,EAAS,GACTV,EAAQ,GACRyG,EAAQ,EACH5K,EAAS,EAAGA,EAASxB,EAAMc,OAAQU,IAAU,CAClD,IAAIiK,EAAIzL,EAAMwB,GACJ,MAANiK,GAAuB,IAAVW,GACb/F,EAAOxF,KAAK8E,GACZA,EAAQ,KAERA,GAAS8F,EACC,MAANA,EACAW,IACa,MAANX,IAEQ,MADfW,GAEI/M,EAAOa,mBAAmB,yBAA0B,QAASF,G,CAKzE2F,GAASU,EAAOxF,KAAK8E,GAEzB,OAAOU,CACX,CAnqBWgG,CAAarM,GAAOsE,KAAI,SAAC4G,GAAK,OAAKnB,EAAUe,WAAWI,EAAOgB,EAAW,GACrF,CAUO,IAAeI,EAAQ,WAQ1B,SAAAA,EAAYtC,EAAuBT,IAAW3J,EAAAA,EAAAA,GAAA,KAAA0M,GACtCtC,IAAqBnB,GACrBxJ,EAAOkC,WAAW,2BAA4BjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC/E2K,UAAW,mBAGnBZ,EAASxJ,KAAM0J,GAEf1J,KAAK0M,aAAc,EAEnB1G,OAAOK,OAAOrG,KAClB,CAwDC,OAxDAC,EAAAA,EAAAA,GAAAwM,EAAA,OAAAvM,IAAA,OAAAC,MAID,SAAYA,GACR,OAAIsM,EAASE,WAAWxM,GAAiBA,EAEnB,kBAAXA,EACAsM,EAASxB,WAAW9K,GAGxBsM,EAASlC,WAAWpK,EAC/B,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GACd,GAAIsM,EAASE,WAAWxM,GAAU,OAAOA,EAEzC,OAAQA,EAAMP,MACV,IAAK,WACD,OAAOgN,GAAiBrC,WAAWpK,GACvC,IAAK,QACD,OAAO0M,EAActC,WAAWpK,GACpC,IAAK,cACD,OAAO2M,GAAoBvC,WAAWpK,GAC1C,IAAK,QACD,OAAO4M,GAAcxC,WAAWpK,GACpC,IAAK,WACL,IAAK,UAED,OAAO,KAGf,OAAOX,EAAOa,mBAAmB,0BAA2B,QAASF,EACzE,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GAMd,MAA4B,WAF5BA,GADAA,GADAA,EAAQA,EAAMwL,QAAQ,MAAO,MACfA,QAAQ,MAAO,MAAMA,QAAQ,MAAO,MAAMA,QAAQ,OAAQ,MAC1DW,QAEJU,MAAM,KAAK,GACXH,EAAc5B,WAAW9K,EAAMqH,UAAU,GAAG8E,QACnB,aAAxBnM,EAAM6M,MAAM,KAAK,GACjBJ,GAAiB3B,WAAW9K,EAAMqH,UAAU,GAAG8E,QAChB,gBAA/BnM,EAAM6M,MAAM,KAAK,GAAGV,OACpBQ,GAAoB7B,WAAW9K,EAAMmM,QACb,UAAxBnM,EAAM6M,MAAM,KAAK,GAClBD,GAAc9B,WAAW9K,EAAMqH,UAAU,GAAG8E,QAG/C9M,EAAOa,mBAAmB,uBAAwB,QAASF,EACtE,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GACd,SAAUA,IAASA,EAAMuM,YAC7B,KAACD,CAAA,CA3EyB,GAkFjBI,EAAc,SAAAI,IAAAjK,EAAAA,EAAAA,GAAA6J,EAAAI,GAAA,IAAAhK,GAAAC,EAAAA,EAAAA,GAAA2J,GAAA,SAAAA,IAAA,OAAA9M,EAAAA,EAAAA,GAAA,KAAA8M,GAAA5J,EAAAiK,MAAA,KAAAC,UAAA,CA2FtB,OA3FsBlN,EAAAA,EAAAA,GAAA4M,EAAA,EAAA3M,IAAA,SAAAC,MAGvB,SAAOuK,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACblL,EAAOa,mBAAmB,sBAAuB,SAAUqK,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBnL,KAAM,QACNwN,UAAWpN,KAAKoN,UAChBzN,KAAMK,KAAKL,KACX0N,OAAQrN,KAAKqN,OAAO5I,KAAI,SAAC6I,GAAK,OAAKzC,KAAKC,MAAMwC,EAAM5C,OAAOA,GAAQ,MAI3E,IAAIlE,EAAS,GAgBb,OAdIkE,IAAWf,EAAYC,UACvBpD,GAAU,UAGdA,GAAUxG,KAAKL,KAAO,IAAMK,KAAKqN,OAAO5I,KACpC,SAAC6I,GAAK,OAAKA,EAAM5C,OAAOA,EAAO,IACjC3B,KAAM2B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAEhDY,IAAWf,EAAYC,SACnB5J,KAAKoN,YACL5G,GAAU,cAIXA,EAAO8F,MAClB,IAAC,EAAApM,IAAA,OAAAC,MAED,SAAYA,GACR,MAAsB,kBAAXA,EACA0M,EAAc5B,WAAW9K,GAE7B0M,EAActC,WAAWpK,EACpC,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GACd,GAAI0M,EAAcU,gBAAgBpN,GAAU,OAAOA,EAEhC,UAAfA,EAAMP,MACNJ,EAAOa,mBAAmB,uBAAwB,QAASF,GAG/D,IAAMuJ,EAAoC,CACtC/J,KAAM6N,GAAiBrN,EAAMR,MAC7ByN,UAAWjN,EAAMiN,UACjBC,OAASlN,EAAMkN,OAASlN,EAAMkN,OAAO5I,IAAIyF,EAAUK,YAAc,GACjE3K,KAAM,SAGV,OAAO,IAAIiN,EAAc7D,EAAmBU,EAChD,GAAC,CAAAxJ,IAAA,aAAAC,MAED,SAAkBA,GAEd,IAAIwC,EAAQxC,EAAMwC,MAAM8K,IACnB9K,GACDnD,EAAOa,mBAAmB,uBAAwB,QAASF,GAG/D,IAAIiN,GAAY,EAahB,OAZAzK,EAAM,GAAGqK,MAAM,KAAKlI,SAAQ,SAAC4I,GACzB,OAAOA,EAASpB,QACZ,IAAK,YACDc,GAAY,EACZ,MACJ,IAAK,GACD,MACJ,QACI5N,EAAOmO,KAAK,qBAAuBD,GAE/C,IAEOb,EAActC,WAAW,CAC5B5K,KAAMgD,EAAM,GAAG2J,OACfc,UAAWA,EACXC,OAAQjB,EAAYzJ,EAAM,IAAI,GAC9B/C,KAAM,SAEd,GAAC,CAAAM,IAAA,kBAAAC,MAED,SAAuBA,GACnB,OAAQA,GAASA,EAAMuM,aAA8B,UAAfvM,EAAMP,IAChD,KAACiN,CAAA,CA3FsB,CAAQJ,GA8FnC,SAASmB,EAASzN,EAAeuJ,GAC7BA,EAAOmE,IAAM,KAEb,IAAIC,EAAQ3N,EAAM6M,MAAM,KACxB,OAAqB,IAAjBc,EAAM7M,QACF6M,EAAM7M,OAAS,GACfzB,EAAOa,mBAAmB,uCAAwC,QAASF,GAE1E2N,EAAM,GAAGnL,MAAM,aAChBnD,EAAOa,mBAAmB,2CAA4C,QAASF,GAEnFuJ,EAAOmE,IAAMpM,EAAAA,GAAAA,KAAeqM,EAAM,IAC3BA,EAAM,IAGV3N,CACX,CAEA,SAAS4N,EAAe5N,EAAeuJ,GACnCA,EAAOsE,UAAW,EAClBtE,EAAOuE,SAAU,EACjBvE,EAAOwE,gBAAkB,aAEzB/N,EAAM6M,MAAM,KAAKlI,SAAQ,SAAC4I,GACtB,OAAQA,EAASpB,QACb,IAAK,WACD5C,EAAOsE,UAAW,EAClB,MACJ,IAAK,UACDtE,EAAOuE,SAAU,EACjBvE,EAAOwE,gBAAkB,UACzB,MACJ,IAAK,aACDxE,EAAOuE,SAAU,EACjBvE,EAAOwE,gBAAkB,aACzB,MACJ,IAAK,OACDxE,EAAOsE,UAAW,EAClBtE,EAAOwE,gBAAkB,OACzB,MACJ,IAAK,OACDxE,EAAOsE,UAAW,EAClBtE,EAAOwE,gBAAkB,OACzB,MACJ,IAAK,WACL,IAAK,SACL,IAAK,GACD,MACJ,QACIC,QAAQC,IAAI,qBAAuBV,GAE/C,GACJ,CAeA,SAASW,GAAYlO,GACjB,IAAIqG,EAAc,CACdwH,UAAU,EACVC,SAAS,EACTC,gBAAiB,WAmDrB,OAhD6B,MAAzB/N,EAAM+N,iBACN1H,EAAO0H,gBAAkB/N,EAAM+N,gBAG/B1H,EAAOwH,SAAuC,SAA3BxH,EAAO0H,iBAAyD,SAA3B1H,EAAO0H,gBACzC,MAAlB/N,EAAM6N,YACC7N,EAAM6N,WAAcxH,EAAOwH,UAC9BxO,EAAOa,mBAAmB,iDAAmDmG,EAAO0H,gBAAiB,QAAS/N,GAKtHqG,EAAOyH,QAAsC,YAA3BzH,EAAO0H,gBACJ,MAAjB/N,EAAM8N,WACC9N,EAAM8N,UAAazH,EAAOyH,SAC7BzO,EAAOa,mBAAmB,gDAAkDmG,EAAO0H,gBAAiB,QAAS/N,IAI7F,MAAjBA,EAAM8N,SACbzH,EAAOyH,UAAY9N,EAAM8N,QAGH,MAAlB9N,EAAM6N,UAAqBxH,EAAOyH,SAA0B,gBAAf9N,EAAMP,MACnDJ,EAAOa,mBAAmB,sCAAuC,QAASF,GAG9EqG,EAAOwH,WAAa7N,EAAM6N,SAEtBxH,EAAOwH,SACPxH,EAAO0H,gBAAkB,OAEzB1H,EAAO0H,gBAAmB1H,EAAOyH,QAAU,UAAW,aAGtDzH,EAAOyH,SAAWzH,EAAOwH,UACzBxO,EAAOa,mBAAmB,wCAAyC,QAASF,IAGvD,MAAlBA,EAAM6N,UACbxH,EAAOwH,WAAa7N,EAAM6N,SAC1BxH,EAAOyH,SAAWzH,EAAOwH,SACzBxH,EAAO0H,gBAAmB1H,EAAOwH,SAAW,OAAQ,WAE9B,gBAAf7N,EAAMP,MACbJ,EAAOa,mBAAmB,sCAAuC,QAASF,GAGvEqG,CACX,CAQO,IAAMsG,GAAoB,SAAAwB,IAAAtL,EAAAA,EAAAA,GAAA8J,EAAAwB,GAAA,IAAArH,GAAA/D,EAAAA,EAAAA,GAAA4J,GAAA,SAAAA,IAAA,OAAA/M,EAAAA,EAAAA,GAAA,KAAA+M,GAAA7F,EAAAiG,MAAA,KAAAC,UAAA,CAwF5B,OAxF4BlN,EAAAA,EAAAA,GAAA6M,EAAA,EAAA5M,IAAA,SAAAC,MAK7B,SAAOuK,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACblL,EAAOa,mBAAmB,sBAAuB,SAAUqK,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBnL,KAAM,cACNsO,gBAA4C,eAAzBlO,KAAKkO,gBAAoClO,KAAKkO,qBAAiBpK,EAClFmK,QAASjO,KAAKiO,QACdJ,IAAM7N,KAAK6N,IAAM7N,KAAK6N,IAAIhL,gBAAYiB,EACtCuJ,OAAQrN,KAAKqN,OAAO5I,KAAI,SAAC6I,GAAK,OAAKzC,KAAKC,MAAMwC,EAAM5C,OAAOA,GAAQ,MAIvEA,IAAWf,EAAYC,SACvBpK,EAAOkC,WAAW,0CAA2CjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9F2K,UAAW,oBAInB,IAAI5D,EAAS,eAAiBxG,KAAKqN,OAAO5I,KACtC,SAAC6I,GAAK,OAAKA,EAAM5C,OAAOA,EAAO,IACjC3B,KAAM2B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAMpD,OAJI9J,KAAKkO,iBAA4C,eAAzBlO,KAAKkO,kBAC7B1H,GAAUxG,KAAKkO,gBAAkB,KAG9B1H,EAAO8F,MAClB,IAAC,EAAApM,IAAA,OAAAC,MAED,SAAYA,GACR,MAAsB,kBAAXA,EACA2M,EAAoB7B,WAAW9K,GAEnC2M,EAAoBvC,WAAWpK,EAC1C,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GACd,GAAI2M,EAAoByB,sBAAsBpO,GAAU,OAAOA,EAE5C,gBAAfA,EAAMP,MACNJ,EAAOa,mBAAmB,6BAA8B,QAASF,GAGrE,IAAIsL,EAAQ4C,GAAYlO,GACpBsL,EAAMuC,UACNxO,EAAOa,mBAAmB,iCAAkC,QAASF,GAGzE,IAAMuJ,EAA0C,CAC5C/J,KAAM,KACNC,KAAMO,EAAMP,KACZyN,OAASlN,EAAMkN,OAASlN,EAAMkN,OAAO5I,IAAIyF,EAAUK,YAAa,GAChE0D,QAASxC,EAAMwC,QACfC,gBAAiBzC,EAAMyC,gBACvBL,IAAM1N,EAAM0N,IAAMpM,EAAAA,GAAAA,KAAetB,EAAM0N,KAAM,MAGjD,OAAO,IAAIf,EAAoB9D,EAAmBU,EACtD,GAAC,CAAAxJ,IAAA,aAAAC,MAED,SAAkBA,GACd,IAAIuJ,EAAc,CAAE9J,KAAM,eAItB4O,GAFJrO,EAAQyN,EAASzN,EAAOuJ,IAEL/G,MAAM8K,IASzB,OARKe,GAA+B,gBAArBA,EAAO,GAAGlC,QACrB9M,EAAOa,mBAAmB,6BAA8B,QAASF,GAGrEuJ,EAAO2D,OAASjB,EAAYoC,EAAO,GAAGlC,QAAQ,GAE9CyB,EAAeS,EAAO,GAAGlC,OAAQ5C,GAE1BoD,EAAoBvC,WAAWb,EAC1C,GAAC,CAAAxJ,IAAA,wBAAAC,MAED,SAA6BA,GACzB,OAAQA,GAASA,EAAMuM,aAA8B,gBAAfvM,EAAMP,IAChD,KAACkN,CAAA,CAxF4B,CAAQL,GAgG5BG,GAAiB,SAAA6B,IAAAzL,EAAAA,EAAAA,GAAA4J,EAAA6B,GAAA,IAAAC,GAAAxL,EAAAA,EAAAA,GAAA0J,GAAA,SAAAA,IAAA,OAAA7M,EAAAA,EAAAA,GAAA,KAAA6M,GAAA8B,EAAAxB,MAAA,KAAAC,UAAA,CA2HzB,OA3HyBlN,EAAAA,EAAAA,GAAA2M,EAAA,EAAA1M,IAAA,SAAAC,MAI1B,SAAOuK,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACblL,EAAOa,mBAAmB,sBAAuB,SAAUqK,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBnL,KAAM,WACND,KAAMK,KAAKL,KACXqO,SAAUhO,KAAKgO,SACfE,gBAA4C,eAAzBlO,KAAKkO,gBAAoClO,KAAKkO,qBAAiBpK,EAClFmK,QAASjO,KAAKiO,QACdJ,IAAM7N,KAAK6N,IAAM7N,KAAK6N,IAAIhL,gBAAYiB,EACtCuJ,OAAQrN,KAAKqN,OAAO5I,KAAI,SAAC6I,GAAK,OAAKzC,KAAKC,MAAMwC,EAAM5C,OAAOA,GAAQ,IACnEiE,QAAS3O,KAAK2O,QAAQlK,KAAI,SAACmK,GAAM,OAAK/D,KAAKC,MAAM8D,EAAOlE,OAAOA,GAAQ,MAI/E,IAAIlE,EAAS,GA8Bb,OA5BIkE,IAAWf,EAAYC,UACvBpD,GAAU,aAGdA,GAAUxG,KAAKL,KAAO,IAAMK,KAAKqN,OAAO5I,KACpC,SAAC6I,GAAK,OAAKA,EAAM5C,OAAOA,EAAO,IACjC3B,KAAM2B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,KAEhDY,IAAWf,EAAYC,UACnB5J,KAAKkO,gBACwB,eAAzBlO,KAAKkO,kBACL1H,GAAWxG,KAAKkO,gBAAkB,KAE/BlO,KAAKgO,WACZxH,GAAU,SAGVxG,KAAK2O,SAAW3O,KAAK2O,QAAQ1N,SAC7BuF,GAAU,YAAcxG,KAAK2O,QAAQlK,KACjC,SAACmK,GAAM,OAAKA,EAAOlE,OAAOA,EAAO,IACnC3B,KAAK,MAAQ,MAGH,MAAZ/I,KAAK6N,MACLrH,GAAU,IAAMxG,KAAK6N,IAAIgB,WAAa,MAIvCrI,EAAO8F,MAClB,IAAC,EAAApM,IAAA,OAAAC,MAED,SAAYA,GACR,MAAsB,kBAAXA,EACAyM,EAAiB3B,WAAW9K,GAEhCyM,EAAiBrC,WAAWpK,EACvC,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GACd,GAAIyM,EAAiBkC,mBAAmB3O,GAAU,OAAOA,EAEtC,aAAfA,EAAMP,MACNJ,EAAOa,mBAAmB,0BAA2B,QAASF,GAGlE,IAAIsL,EAAQ4C,GAAYlO,GAElBuJ,EAAuC,CACzC9J,KAAMO,EAAMP,KACZD,KAAM6N,GAAiBrN,EAAMR,MAC7BqO,SAAUvC,EAAMuC,SAChBX,OAASlN,EAAMkN,OAASlN,EAAMkN,OAAO5I,IAAIyF,EAAUK,YAAa,GAChEoE,QAAUxO,EAAMwO,QAAUxO,EAAMwO,QAAQlK,IAAIyF,EAAUK,YAAa,GACnE0D,QAASxC,EAAMwC,QACfC,gBAAiBzC,EAAMyC,gBACvBL,IAAM1N,EAAM0N,IAAMpM,EAAAA,GAAAA,KAAetB,EAAM0N,KAAM,MAGjD,OAAO,IAAIjB,EAAiB5D,EAAmBU,EACnD,GAAC,CAAAxJ,IAAA,aAAAC,MAED,SAAkBA,GACd,IAAIuJ,EAAc,CAAE9J,KAAM,YAGtBkO,GAFJ3N,EAAQyN,EAASzN,EAAOuJ,IAENsD,MAAM,aACpBc,EAAM7M,OAAS,GACfzB,EAAOa,mBAAmB,0BAA2B,QAASF,GAGlE,IAAIqO,EAASV,EAAM,GAAGnL,MAAM8K,IAa5B,GAZKe,GACDhP,EAAOa,mBAAmB,6BAA8B,QAASF,GAGrEuJ,EAAO/J,KAAO6O,EAAO,GAAGlC,OACpB5C,EAAO/J,MAAQ6N,GAAiB9D,EAAO/J,MAE3C+J,EAAO2D,OAASjB,EAAYoC,EAAO,IAAI,GAEvCT,EAAeS,EAAO,GAAGlC,OAAQ5C,GAG7BoE,EAAM7M,OAAS,EAAG,CACnB,IAAI8N,EAAUjB,EAAM,GAAGnL,MAAM8K,IACH,IAArBsB,EAAQ,GAAGzC,QAAqC,IAArByC,EAAQ,GAAGzC,QACtC9M,EAAOa,mBAAmB,oBAAqB,QAASF,GAE5DuJ,EAAOiF,QAAUvC,EAAY2C,EAAQ,IAAI,E,MAEzCrF,EAAOiF,QAAU,GAGrB,OAAO/B,EAAiBrC,WAAWb,EACvC,GAAC,CAAAxJ,IAAA,qBAAAC,MAED,SAA0BA,GACtB,OAAQA,GAASA,EAAMuM,aAA8B,aAAfvM,EAAMP,IAChD,KAACgN,CAAA,CA3HyB,CAAQE,IAiItC,SAASkC,GAAeC,GACpB,IAAMC,EAAMD,EAASvE,SAIrB,MAHY,kBAARwE,GAAmC,mBAARA,GAC3B1P,EAAOa,mBAAmB,+BAADe,OAAiC8N,EAAI,UAAU,WAAYD,GAEjFA,CACX,CAEO,IAAMlC,GAAc,SAAAoC,IAAAnM,EAAAA,EAAAA,GAAA+J,EAAAoC,GAAA,IAAAC,GAAAlM,EAAAA,EAAAA,GAAA6J,GAAA,SAAAA,IAAA,OAAAhN,EAAAA,EAAAA,GAAA,KAAAgN,GAAAqC,EAAAlC,MAAA,KAAAC,UAAA,CAsEtB,OAtEsBlN,EAAAA,EAAAA,GAAA8M,EAAA,EAAA7M,IAAA,SAAAC,MAEvB,SAAOuK,GAMH,GALKA,IAAUA,EAASf,EAAYC,SAC/BD,EAAYe,IACblL,EAAOa,mBAAmB,sBAAuB,SAAUqK,GAG3DA,IAAWf,EAAYI,KACvB,OAAOc,KAAKE,UAAU,CAClBnL,KAAM,QACND,KAAMK,KAAKL,KACX0N,OAAQrN,KAAKqN,OAAO5I,KAAI,SAAC6I,GAAK,OAAKzC,KAAKC,MAAMwC,EAAM5C,OAAOA,GAAQ,MAI3E,IAAIlE,EAAS,GAUb,OARIkE,IAAWf,EAAYC,UACvBpD,GAAU,WAGdA,GAAUxG,KAAKL,KAAO,IAAMK,KAAKqN,OAAO5I,KACpC,SAAC6I,GAAK,OAAKA,EAAM5C,OAAOA,EAAO,IACjC3B,KAAM2B,IAAWf,EAAYG,KAAQ,KAAM,KAAO,MAEtCwC,MAClB,IAAC,EAAApM,IAAA,OAAAC,MAED,SAAYA,GACR,MAAsB,kBAAXA,EACA4M,EAAc9B,WAAW9K,GAE7B4M,EAAcxC,WAAWpK,EACpC,GAAC,CAAAD,IAAA,aAAAC,MAED,SAAkBA,GACd,GAAI4M,EAAcsC,gBAAgBlP,GAAU,OAAOA,EAEhC,UAAfA,EAAMP,MACNJ,EAAOa,mBAAmB,uBAAwB,QAASF,GAG/D,IAAMuJ,EAA+B,CACjC9J,KAAMO,EAAMP,KACZD,KAAM6N,GAAiBrN,EAAMR,MAC7B0N,OAASlN,EAAMkN,OAASlN,EAAMkN,OAAO5I,IAAIyF,EAAUK,YAAa,IAGpE,OAAOyE,GAAe,IAAIjC,EAAc/D,EAAmBU,GAC/D,GAAC,CAAAxJ,IAAA,aAAAC,MAED,SAAkBA,GACd,IAAIuJ,EAAc,CAAE9J,KAAM,SAEtB4O,EAASrO,EAAMwC,MAAM8K,IAUzB,OATKe,GACDhP,EAAOa,mBAAmB,0BAA2B,QAASF,GAGlEuJ,EAAO/J,KAAO6O,EAAO,GAAGlC,OACpB5C,EAAO/J,MAAQ6N,GAAiB9D,EAAO/J,MAE3C+J,EAAO2D,OAASjB,EAAYoC,EAAO,IAAI,GAEhCQ,GAAejC,EAAcxC,WAAWb,GACnD,GAAC,CAAAxJ,IAAA,kBAAAC,MAED,SAAuBA,GACnB,OAAQA,GAASA,EAAMuM,aAA8B,UAAfvM,EAAMP,IAChD,KAACmN,CAAA,CAtEsB,CAAQN,GAyEnC,SAAStB,GAAWvL,GAWhB,OARIA,EAAK+C,MAAM,mBACX/C,EAAO,UAAYA,EAAK4H,UAAU,GAC3B5H,EAAK+C,MAAM,oBAClB/C,EAAO,SAAWA,EAAK4H,UAAU,IAK9B5H,CACX,CAGA,IAAM0P,GAAkB,IAAIrF,OAAO,8BACnC,SAASuD,GAAiBrN,GAItB,OAHKA,GAAUA,EAAMwC,MAAM2M,KACvB9P,EAAOa,mBAAmB,uBAADe,OAAyBjB,EAAM,KAAK,QAASA,GAEnEA,CACX,CAEA,IAAMsN,GAAa,IAAIxD,OAAO,gCCvgC9B,IAAMzK,GAAS,IAAIC,EAAAA,GAAOF,GAgBpBgQ,GAAiB,IAAItF,OAAO,mBAC5BuF,GAAkB,IAAIvF,OAAO,qBA+FtBwF,GAA4B,IA1FpB,WAGjB,SAAAC,EAAY3N,IAAuBhC,EAAAA,EAAAA,GAAA,KAAA2P,IAC/BlP,EAAAA,EAAAA,IAAeR,KAAM,aAAc+B,GAAc,KACrD,CAkFC,OAlFA9B,EAAAA,EAAAA,GAAAyP,EAAA,EAAAxP,IAAA,YAAAC,MAED,SAAUkL,GAAgB,IAAAxJ,EAAA,KAEtB,OAAQwJ,EAAM1F,UACV,IAAK,UACD,OAAO,IAAI7C,EAAauI,EAAM1L,MAClC,IAAK,OACD,OAAO,IAAIgH,EAAa0E,EAAM1L,MAClC,IAAK,SACD,OAAO,IAAI+I,EAAY2C,EAAM1L,MACjC,IAAK,QACD,OAAO,IAAIoH,EAAWsE,EAAM1L,MAChC,IAAK,QACD,OAAO,IAAI2G,EAAWtG,KAAK2P,UAAUtE,EAAMf,eAAgBe,EAAMhB,YAAagB,EAAM1L,MACxF,IAAK,QACD,OAAO,IAAIkJ,GAAYwC,EAAMb,YAAc,IAAI/F,KAAI,SAACmL,GAChD,OAAO/N,EAAK8N,UAAUC,EAC1B,IAAIvE,EAAM1L,MACd,IAAK,GACD,OAAO,IAAI8H,EAAU4D,EAAM1L,MAInC,IAAIgD,EAAQ0I,EAAMzL,KAAK+C,MAAM6M,IAC7B,GAAI7M,EAAO,CACP,IAAI2E,EAAO1E,SAASD,EAAM,IAAM,OAIhC,OAHa,IAAT2E,GAAcA,EAAO,KAAQA,EAAO,IAAO,IAC3C9H,GAAOa,mBAAmB,WAAasC,EAAM,GAAK,cAAe,QAAS0I,GAEvE,IAAI3D,EAAYJ,EAAO,EAAiB,QAAb3E,EAAM,GAAe0I,EAAM1L,K,CAKjE,GADAgD,EAAQ0I,EAAMzL,KAAK+C,MAAM4M,IACd,CACP,IAAIjI,EAAO1E,SAASD,EAAM,IAI1B,OAHa,IAAT2E,GAAcA,EAAO,KACrB9H,GAAOa,mBAAmB,uBAAwB,QAASgL,GAExD,IAAIhE,EAAgBC,EAAM+D,EAAM1L,K,CAG3C,OAAOH,GAAOa,mBAAmB,eAAgB,OAAQgL,EAAMzL,KACnE,GAAC,CAAAM,IAAA,eAAAC,MAED,WAAyB,OAAO,EAAI,GAAC,CAAAD,IAAA,aAAAC,MAErC,SAAWY,EAAkBiB,GACzB,OAAO,IAAIF,EAAOf,EAAMf,KAAK6P,eAAgB7P,KAAK+B,WAAYC,EAClE,GAAC,CAAA9B,IAAA,aAAAC,MAED,WACI,OAAO,IAAIG,EAAON,KAAK6P,eAC3B,GAAC,CAAA3P,IAAA,kBAAAC,MAED,SAAgB2I,GAAwC,IAAAgH,EAAA,KAC9C3L,EAAuB2E,EAAMrE,KAAI,SAAC7E,GAAI,OAAKkQ,EAAKH,UAAUzF,EAAU6F,KAAKnQ,GAAM,IAErF,OADc,IAAIiJ,EAAW1E,EAAQ,KACxBJ,cACjB,GAAC,CAAA7D,IAAA,SAAAC,MAED,SAAO2I,EAA0C1E,GAA0B,IAAA4L,EAAA,KACnElH,EAAM7H,SAAWmD,EAAOnD,QACxBzB,GAAOkC,WAAW,+BAAgCjC,EAAAA,GAAAA,OAAAA,iBAAgC,CAC9EgH,MAAO,CAAEqC,MAAOA,EAAM7H,OAAQmD,OAAQA,EAAOnD,QAC7Cd,MAAO,CAAE2I,MAAOA,EAAO1E,OAAQA,KAIvC,IAAMD,EAAS2E,EAAMrE,KAAI,SAAC7E,GAAI,OAAKoQ,EAAKL,UAAUzF,EAAU6F,KAAKnQ,GAAM,IACjEiE,EAAS,IAAIgF,EAAW1E,EAAQ,KAEhCjD,EAASlB,KAAKiQ,aAEpB,OADApM,EAAMG,OAAO9C,EAAQkD,GACdlD,EAAOH,IAClB,GAAC,CAAAb,IAAA,SAAAC,MAED,SAAO2I,EAA0C/H,EAAiBsB,GAAe,IAAA6N,EAAA,KACvE/L,EAAuB2E,EAAMrE,KAAI,SAAC7E,GAAI,OAAKsQ,EAAKP,UAAUzF,EAAU6F,KAAKnQ,GAAM,IAErF,OADc,IAAIiJ,EAAW1E,EAAQ,KACxBF,OAAOjE,KAAKmQ,YAAW7O,EAAAA,EAAAA,IAASP,GAAOsB,GACxD,KAACqN,CAAA,CAvFgB,IChBflQ,GAAS,IAAIC,EAAAA,GAAOF,GAIb6Q,GAAe,SAAAC,IAAArN,EAAAA,EAAAA,GAAAoN,EAAAC,GAAA,IAAApN,GAAAC,EAAAA,EAAAA,GAAAkN,GAAA,SAAAA,IAAA,OAAArQ,EAAAA,EAAAA,GAAA,KAAAqQ,GAAAnN,EAAAiK,MAAA,KAAAC,UAAA,QAAAlN,EAAAA,EAAAA,GAAAmQ,EAAA,EAAQE,EAAAA,IAQvBC,GAAuB,SAAAC,IAAAxN,EAAAA,EAAAA,GAAAuN,EAAAC,GAAA,IAAAvJ,GAAA/D,EAAAA,EAAAA,GAAAqN,GAAA,SAAAA,IAAA,OAAAxQ,EAAAA,EAAAA,GAAA,KAAAwQ,GAAAtJ,EAAAiG,MAAA,KAAAC,UAAA,QAAAlN,EAAAA,EAAAA,GAAAsQ,EAAA,EAAQD,EAAAA,IAS/BG,GAAiB,SAAAC,IAAA1N,EAAAA,EAAAA,GAAAyN,EAAAC,GAAA,IAAAhC,GAAAxL,EAAAA,EAAAA,GAAAuN,GAAA,SAAAA,IAAA,OAAA1Q,EAAAA,EAAAA,GAAA,KAAA0Q,GAAA/B,EAAAxB,MAAA,KAAAC,UAAA,QAAAlN,EAAAA,EAAAA,GAAAwQ,EAAA,EAAQH,EAAAA,IAQzBK,GAAQ,SAAAC,IAAA5N,EAAAA,EAAAA,GAAA2N,EAAAC,GAAA,IAAAxB,GAAAlM,EAAAA,EAAAA,GAAAyN,GAAA,SAAAA,IAAA,OAAA5Q,EAAAA,EAAAA,GAAA,KAAA4Q,GAAAvB,EAAAlC,MAAA,KAAAC,UAAA,CAMhB,OANgBlN,EAAAA,EAAAA,GAAA0Q,EAAA,OAAAzQ,IAAA,YAAAC,MAIjB,SAAiBA,GACb,SAAUA,IAASA,EAAM0Q,WAC7B,KAACF,CAAA,CANgB,CAAQL,EAAAA,IASvBQ,GAA8G,CAChH,aAAc,CAAEC,UAAW,gBAAiBpR,KAAM,QAAS0N,OAAQ,CAAE,UAAY2D,QAAQ,GACzF,aAAc,CAAED,UAAW,iBAAkBpR,KAAM,QAAS0N,OAAQ,CAAE,aAG1E,SAAS4D,GAAgBC,EAAkB7N,GACvC,IAAM8N,EAAO,IAAIpL,MAAM,0DAAD3E,OAA4D8P,IAElF,OADMC,EAAM9N,MAAQA,EACb8N,CACX,CAeO,IAAMC,GAAS,WAclB,SAAAA,EAAYC,GAAmE,IAAAxP,EAAA,MAAA9B,EAAAA,EAAAA,GAAA,KAAAqR,GAC3E,IAAIE,EAAuD,GAEvDA,EADsB,kBAAfD,EACDxG,KAAKC,MAAMuG,GAEXA,GAGV7Q,EAAAA,EAAAA,IAAeR,KAAM,YAAasR,EAAI7M,KAAI,SAACwK,GACvC,OAAOxC,EAASsD,KAAKd,EACzB,IAAGsC,QAAO,SAACtC,GAAQ,OAAkB,MAAZA,CAAgB,MAEzCzO,EAAAA,EAAAA,IAAeR,KAAM,aAAawR,EAAAA,EAAAA,IAAS,gBAAAJ,EAAA,KAAAK,iBAAA,EAA6B,cAAtCD,KAElChR,EAAAA,EAAAA,IAAeR,KAAM,YAAa,CAAC,IACnCQ,EAAAA,EAAAA,IAAeR,KAAM,SAAU,CAAC,IAChCQ,EAAAA,EAAAA,IAAeR,KAAM,SAAU,CAAC,IAChCQ,EAAAA,EAAAA,IAAeR,KAAM,UAAW,CAAC,GAGjCA,KAAKqR,UAAUvM,SAAQ,SAACmK,GACpB,IAAIyC,EAAyC,KAC7C,OAAQzC,EAASrP,MACb,IAAK,cACD,OAAIiC,EAAK8P,YACLnS,GAAOmO,KAAK,2CAIhBnN,EAAAA,EAAAA,IAAeqB,EAAM,SAA+BoN,GAExD,IAAK,WAGDyC,EAAS7P,EAAK+P,UACd,MACJ,IAAK,QAEDF,EAAS7P,EAAKgQ,OACd,MACJ,IAAK,QACDH,EAAS7P,EAAKiQ,OACd,MACJ,QACI,OAGR,IAAIf,EAAY9B,EAASvE,SACrBgH,EAAOX,GACPvR,GAAOmO,KAAK,0BAA4BoD,GAI5CW,EAAOX,GAAa9B,CACxB,IAGKjP,KAAK2R,SACNnR,EAAAA,EAAAA,IAAeR,KAAM,SAAU8M,GAAoBiD,KAAK,CACpD9B,SAAS,EACTrO,KAAM,kBAIdY,EAAAA,EAAAA,IAAeR,KAAM,gBAAgB,EACzC,CA4iBC,OA5iBAC,EAAAA,EAAAA,GAAAmR,EAAA,EAAAlR,IAAA,SAAAC,MAED,SAAOuK,GACEA,IAAUA,EAASf,EAAYG,MAChCY,IAAWf,EAAYC,SACvBpK,GAAOa,mBAAmB,gDAAiD,SAAUqK,GAGzF,IAAM4G,EAAMtR,KAAKqR,UAAU5M,KAAI,SAACwK,GAAQ,OAAKA,EAASvE,OAAOA,EAAO,IAGpE,OAAIA,IAAWf,EAAYI,KACfc,KAAKE,UAAUuG,EAAI7M,KAAI,SAACsN,GAAC,OAAKlH,KAAKC,MAAMiH,EAAE,KAGhDT,CACX,GAEA,CAAApR,IAAA,cAAAC,MAkBA,SAAY6R,GACR,IAAIC,EAAAA,EAAAA,IAAYD,GAA2B,CACvC,IAAK,IAAMrS,KAAQK,KAAK4R,UACpB,GAAII,IAA6BhS,KAAKkS,WAAWvS,GAC7C,OAAOK,KAAK4R,UAAUjS,GAG9BH,GAAOa,mBAAmB,uBAAwB,UAAW2R,E,CAIjE,IAA+C,IAA3CA,EAAyBzI,QAAQ,KAAa,CAC9C,IAAM5J,EAAOqS,EAAyB1F,OAChC6F,EAAWnM,OAAOoM,KAAKpS,KAAK4R,WAAWL,QAAO,SAACc,GAAC,OAAMA,EAAErF,MAAM,KAAgB,KAAOrN,CAAI,IAO/F,OANwB,IAApBwS,EAASlR,OACTzB,GAAOa,mBAAmB,uBAAwB,OAAQV,GACnDwS,EAASlR,OAAS,GACzBzB,GAAOa,mBAAmB,8BAA+B,OAAQV,GAG9DK,KAAK4R,UAAUO,EAAS,G,CAInC,IAAM3L,EAASxG,KAAK4R,UAAUhF,GAAiB3B,WAAW+G,GAA0BtH,UAIpF,OAHKlE,GACDhH,GAAOa,mBAAmB,uBAAwB,YAAa2R,GAE5DxL,CACX,GAEA,CAAAtG,IAAA,WAAAC,MACA,SAASmS,GACL,IAAIL,EAAAA,EAAAA,IAAYK,GAAyB,CACrC,IAAMC,EAAYD,EAAuBE,cACzC,IAAK,IAAM7S,KAAQK,KAAK6R,OACpB,GAAIU,IAAcvS,KAAKyS,cAAc9S,GACjC,OAAOK,KAAK6R,OAAOlS,GAG3BH,GAAOa,mBAAmB,oBAAqB,YAAakS,E,CAIhE,IAA6C,IAAzCD,EAAuB/I,QAAQ,KAAa,CAC5C,IAAM5J,EAAO2S,EAAuBhG,OAC9B6F,EAAWnM,OAAOoM,KAAKpS,KAAK6R,QAAQN,QAAO,SAACc,GAAC,OAAMA,EAAErF,MAAM,KAAgB,KAAOrN,CAAI,IAO5F,OANwB,IAApBwS,EAASlR,OACTzB,GAAOa,mBAAmB,oBAAqB,OAAQV,GAChDwS,EAASlR,OAAS,GACzBzB,GAAOa,mBAAmB,2BAA4B,OAAQV,GAG3DK,KAAK6R,OAAOM,EAAS,G,CAIhC,IAAM3L,EAASxG,KAAK6R,OAAOhF,EAAc5B,WAAWqH,GAAwB5H,UAI5E,OAHKlE,GACDhH,GAAOa,mBAAmB,oBAAqB,YAAaiS,GAEzD9L,CACX,GAEA,CAAAtG,IAAA,WAAAC,MACA,SAAS6R,GACL,IAAIC,EAAAA,EAAAA,IAAYD,GAA2B,CACvC,IAAME,GAAaV,EAAAA,EAAAA,IAA2DxR,KAAKyR,YAAa,cAChG,IAAK,IAAM9R,KAAQK,KAAK8R,OAAQ,CAE5B,GAAIE,IAA6BE,EADnBlS,KAAK8R,OAAOnS,IAEtB,OAAOK,KAAK8R,OAAOnS,E,CAG3BH,GAAOa,mBAAmB,oBAAqB,UAAW2R,E,CAI9D,IAA+C,IAA3CA,EAAyBzI,QAAQ,KAAa,CAC9C,IAAM5J,EAAOqS,EAAyB1F,OAChC6F,EAAWnM,OAAOoM,KAAKpS,KAAK8R,QAAQP,QAAO,SAACc,GAAC,OAAMA,EAAErF,MAAM,KAAgB,KAAOrN,CAAI,IAO5F,OANwB,IAApBwS,EAASlR,OACTzB,GAAOa,mBAAmB,oBAAqB,OAAQV,GAChDwS,EAASlR,OAAS,GACzBzB,GAAOa,mBAAmB,2BAA4B,OAAQV,GAG3DK,KAAK8R,OAAOK,EAAS,G,CAIhC,IAAM3L,EAASxG,KAAK8R,OAAOlF,GAAiB3B,WAAW+G,GAA0BtH,UAIjF,OAHKlE,GACDhH,GAAOa,mBAAmB,oBAAqB,YAAa2R,GAEzDxL,CACX,GAEA,CAAAtG,IAAA,aAAAC,MACA,SAAW8O,GACP,GAAyB,kBAAdA,EACP,IACIA,EAAWjP,KAAK0S,YAAYzD,E,CAC9B,MAAO5L,GACL,IACI4L,EAAWjP,KAAK2S,SAAiB1D,E,CACnC,MAAO2D,GACL,MAAMvP,C,EAKlB,OAAOmO,EAAAA,EAAAA,IAA2DxR,KAAKyR,YAAa,aAA7ED,CAA2FvC,EACtG,GAEA,CAAA/O,IAAA,gBAAAC,MACA,SAAc0S,GAKV,MAJ8B,kBAAnBA,IACPA,EAAgB7S,KAAK8S,SAASD,KAG3BrB,EAAAA,EAAAA,IAAwCxR,KAAKyR,YAAa,gBAA1DD,CAA2EqB,EACtF,GAAC,CAAA3S,IAAA,gBAAAC,MAGD,SAAcuJ,EAAkC3I,GAC5C,OAAOf,KAAK+S,UAAU9O,OAAOyF,EAAQ3I,EACzC,GAAC,CAAAb,IAAA,gBAAAC,MAED,SAAcuJ,EAAkCtF,GAC5C,OAAOpE,KAAK+S,UAAU/O,OAAO0F,EAAQtF,EACzC,GAAC,CAAAlE,IAAA,eAAAC,MAED,SAAaiE,GACT,OAAOpE,KAAKgT,cAAchT,KAAK2R,OAAOtE,OAAQjJ,GAAU,GAC5D,GAAC,CAAAlE,IAAA,oBAAAC,MAED,SAAkB8O,EAAkClO,GACvB,kBAAdkO,IACPA,EAAWjP,KAAK2S,SAAS1D,IAG7B,IAAM5N,GAAQC,EAAAA,EAAAA,IAASP,GAMvB,OAJImB,EAAAA,EAAAA,IAAQb,EAAMG,MAAM,EAAG,MAAQxB,KAAKkS,WAAWjD,IAC/CzP,GAAOa,mBAAmB,uCAADe,OAAyC6N,EAAStP,KAAK,KAAK,QAAQuC,EAAAA,EAAAA,IAAQb,IAGlGrB,KAAKiT,cAAchE,EAAS5B,OAAQhM,EAAMG,MAAM,GAC3D,GAAC,CAAAtB,IAAA,oBAAAC,MAED,SAAkB8O,EAAkC7K,GAKhD,MAJyB,kBAAd6K,IACPA,EAAWjP,KAAK2S,SAAS1D,KAGtB/M,EAAAA,EAAAA,KAAQd,EAAAA,EAAAA,IAAO,CAClBpB,KAAKkS,WAAWjD,GAChBjP,KAAKgT,cAAc/D,EAAS5B,OAAQjJ,GAAU,MAEtD,GAEA,CAAAlE,IAAA,qBAAAC,MACA,SAAmB+S,EAA6CnS,GAC3B,kBAAtBmS,IACPA,EAAmBlT,KAAK0S,YAAYQ,IAGxC,IAAM7R,GAAQC,EAAAA,EAAAA,IAASP,GAMvB,OAJImB,EAAAA,EAAAA,IAAQb,EAAMG,MAAM,EAAG,MAAQxB,KAAKkS,WAAWgB,IAC/C1T,GAAOa,mBAAmB,0CAADe,OAA4C8R,EAAiBvT,KAAK,KAAK,QAAQuC,EAAAA,EAAAA,IAAQb,IAG7GrB,KAAKiT,cAAcC,EAAiB7F,OAAQhM,EAAMG,MAAM,GACnE,GAEA,CAAAtB,IAAA,qBAAAC,MACA,SAAmB+S,EAA6C9O,GAK5D,MAJiC,kBAAtB8O,IACPA,EAAmBlT,KAAK0S,YAAYQ,KAGjChR,EAAAA,EAAAA,KAAQd,EAAAA,EAAAA,IAAO,CAClBpB,KAAKkS,WAAWgB,GAChBlT,KAAKgT,cAAcE,EAAiB7F,OAAQjJ,GAAU,MAE9D,GAEA,CAAAlE,IAAA,uBAAAC,MACA,SAAqB+S,EAA6CnS,GAC7B,kBAAtBmS,IACPA,EAAmBlT,KAAK0S,YAAYQ,IAGxC,IAAI7R,GAAQC,EAAAA,EAAAA,IAASP,GAEjBiQ,EAAiB,KACjB5Q,EAAU,GACV+S,EAAoB,KACpBC,EAAoB,KACpBC,EAAyB,KAC7B,OAAQhS,EAAMJ,OAASjB,KAAK+S,UAAUlD,gBAClC,KAAK,EACD,IACI,OAAO7P,KAAK+S,UAAU9O,OAAOiP,EAAiBvE,QAAStN,E,CACzD,MAAOgC,GAAQ,CACjB,MAEJ,KAAK,EACD,IAAMiQ,GAAWpR,EAAAA,EAAAA,IAAQb,EAAMG,MAAM,EAAG,IAClC+R,EAAUzC,GAAcwC,GAC9B,GAAIC,EACAJ,EAAYnT,KAAK+S,UAAU9O,OAAOsP,EAAQlG,OAAQhM,EAAMG,MAAM,IAC9D4R,EAAYG,EAAQ5T,KACpB0T,EAAiBE,EAAQxC,UACrBwC,EAAQvC,SAAUA,EAASmC,EAAU,IACvB,UAAdC,EACAhT,EAAU,4EAAHgB,OAAgFyJ,KAAKE,UAAUoI,EAAU,KAC3F,UAAdC,IACPhT,EAAU,yEAAHgB,OAA6E+R,EAAU,UAGlG,IACI,IAAM9P,EAAQrD,KAAK2S,SAASW,GAC5BH,EAAYnT,KAAK+S,UAAU9O,OAAOZ,EAAMgK,OAAQhM,EAAMG,MAAM,IAC5D4R,EAAY/P,EAAM1D,KAClB0T,EAAiBhQ,EAAMqH,Q,CACzB,MAAOrH,GAAQ,EAM7B,OAAO7D,GAAOkC,WAAW,wBAA0BtB,EAASX,EAAAA,GAAAA,OAAAA,eAA8B,CACtF+T,OAAQN,EAAiBxI,SACzB3J,MAAMmB,EAAAA,EAAAA,IAAQnB,GAAOoS,UAAAA,EAAWC,UAAAA,EAAWC,eAAAA,EAAgBrC,OAAAA,GAEnE,GAEA,CAAA9Q,IAAA,uBAAAC,MACA,SAAqB+S,EAA6C9O,GAK9D,MAJiC,kBAAtB8O,IACPA,EAAmBlT,KAAK0S,YAAYQ,KAGjChR,EAAAA,EAAAA,IAAQlC,KAAK+S,UAAU/O,OAAOkP,EAAiBvE,QAASvK,GAAU,IAC7E,GAEA,CAAAlE,IAAA,qBAAAC,MACA,SAAmB0S,EAAuCzO,GAA0B,IAAA0L,EAAA,KAClD,kBAAnB+C,IACPA,EAAgB7S,KAAK8S,SAASD,IAG9BzO,EAAOnD,OAAS4R,EAAcxF,OAAOpM,QACrCzB,GAAOkC,WAAW,0BAA4BmR,EAAcnI,SAAUjL,EAAAA,GAAAA,OAAAA,oBAAmC,CACrGiF,SAAU,SACVvE,MAAOiE,IAIf,IAAIqP,EAAwC,GACvCZ,EAAczF,WAAaqG,EAAOzS,KAAKhB,KAAKyS,cAAcI,IAE/D,IAAMa,EAAc,SAACrI,EAAkBlL,GACnC,MAAmB,WAAfkL,EAAMzL,MACE+T,EAAAA,EAAAA,IAAGxT,GACW,UAAfkL,EAAMzL,MACLgU,EAAAA,EAAAA,IAAU1R,EAAAA,EAAAA,IAAQ/B,KAGX,SAAfkL,EAAMzL,MAAqC,mBAAXO,IAChCA,EAASA,EAAQ,OAAQ,QAGzBkL,EAAMzL,KAAK+C,MAAM,YACjBxC,EAAQsB,EAAAA,GAAAA,KAAetB,GAAOwD,eAIf,YAAf0H,EAAMzL,MAAsBkQ,EAAKiD,UAAU/O,OAAQ,CAAE,WAAa,CAAE7D,KACjEsD,EAAAA,EAAAA,KAAWvB,EAAAA,EAAAA,IAAQ/B,GAAQ,IACtC,EAyBA,IAvBAiE,EAAOU,SAAQ,SAAC3E,EAAO4E,GAEnB,IAAIsG,EAAwBwH,EAAexF,OAAOtI,GAE7CsG,EAAMV,QAOE,MAATxK,EACAsT,EAAOzS,KAAK,MACc,UAAnBqK,EAAM1F,UAA2C,UAAnB0F,EAAM1F,SAC3CnG,GAAOa,mBAAmB,gDAAkD,YAAcgL,EAAM1L,KAAOQ,GAChGmE,MAAMC,QAAQpE,GACrBsT,EAAOzS,KAAKb,EAAMsE,KAAI,SAACtE,GAAK,OAAKuT,EAAYrI,EAAOlL,EAAM,KAE1DsT,EAAOzS,KAAK0S,EAAYrI,EAAOlL,IAblB,MAATA,GACAX,GAAOa,mBAAmB,qDAAuD,YAAcgL,EAAM1L,KAAOQ,EAcxH,IAGOsT,EAAOxS,QAAwC,OAA9BwS,EAAOA,EAAOxS,OAAS,IAC3CwS,EAAOI,MAGX,OAAOJ,CACX,GAAC,CAAAvT,IAAA,iBAAAC,MAED,SAAe0S,EAAuCzO,GAA0B,IAAA4L,EAAA,KAC9C,kBAAnB6C,IACPA,EAAgB7S,KAAK8S,SAASD,IAGlC,IAAMY,EAAwB,GAExBK,EAA8B,GAC9BC,EAA4B,GA6BlC,OA3BKlB,EAAczF,WACfqG,EAAOzS,KAAKhB,KAAKyS,cAAcI,IAG/BzO,EAAOnD,SAAW4R,EAAcxF,OAAOpM,QACvCzB,GAAOa,mBAAmB,kCAAmC,SAAU+D,GAG3EyO,EAAcxF,OAAOvI,SAAQ,SAACuG,EAAOtG,GACjC,IAAM5E,EAAQiE,EAAOW,GACrB,GAAIsG,EAAMV,QACN,GAAmB,WAAfU,EAAMzL,KACN6T,EAAOzS,MAAK2S,EAAAA,EAAAA,IAAGxT,SACZ,GAAmB,UAAfkL,EAAMzL,KACb6T,EAAOzS,MAAK4S,EAAAA,EAAAA,GAAUzT,QACnB,IAAuB,UAAnBkL,EAAM1F,UAA2C,UAAnB0F,EAAM1F,SAE3C,MAAM,IAAII,MAAM,mBAEhB0N,EAAOzS,KAAKgP,EAAK+C,UAAU/O,OAAO,CAAEqH,EAAMzL,MAAQ,CAAEO,I,MAGxD2T,EAAU9S,KAAKqK,GACf0I,EAAW/S,KAAKb,EAExB,IAEO,CACHY,KAAMf,KAAK+S,UAAU/O,OAAO8P,EAAYC,GACxCN,OAAQA,EAEhB,GAEA,CAAAvT,IAAA,iBAAAC,MACA,SAAe0S,EAAuC9R,EAAiB0S,GAKnE,GAJ8B,kBAAnBZ,IACPA,EAAgB7S,KAAK8S,SAASD,IAGpB,MAAVY,IAAmBZ,EAAczF,UAAW,CAC5C,IAAI4G,EAAYhU,KAAKyS,cAAcI,IAC9BZ,EAAAA,EAAAA,IAAYwB,EAAO,GAAI,KAAOA,EAAO,GAAGjB,gBAAkBwB,GAC3DxU,GAAOkC,WAAW,0BAA2BjC,EAAAA,GAAAA,OAAAA,iBAAgC,CAAEiF,SAAU,YAAauP,SAAUD,EAAW7T,MAAOsT,EAAO,KAE7IA,EAASA,EAAOjS,MAAM,E,CAG1B,IAAImJ,EAA4B,GAC5BuJ,EAA+B,GAC/BpU,EAA0B,GAE9B+S,EAAcxF,OAAOvI,SAAQ,SAACuG,EAAOtG,GAC7BsG,EAAMV,QACa,WAAfU,EAAMzL,MAAoC,UAAfyL,EAAMzL,MAAuC,UAAnByL,EAAM1F,UAA2C,UAAnB0F,EAAM1F,UACzFgF,EAAQ3J,KAAKkJ,EAAUK,WAAW,CAAE3K,KAAM,UAAWD,KAAM0L,EAAM1L,QACjEG,EAAQkB,MAAK,KAEb2J,EAAQ3J,KAAKqK,GACbvL,EAAQkB,MAAK,KAGjBkT,EAAWlT,KAAKqK,GAChBvL,EAAQkB,MAAK,GAErB,IAEA,IAAImT,EAA2B,MAAVV,EAAkBzT,KAAK+S,UAAU9O,OAAO0G,GAASvJ,EAAAA,EAAAA,IAAOqS,IAAU,KACnFW,EAAmBpU,KAAK+S,UAAU9O,OAAOiQ,EAAYnT,GAAM,GAE3DyF,EAAkD,GAClD6N,EAAkB,EAAGC,EAAe,EACxCzB,EAAcxF,OAAOvI,SAAQ,SAACuG,EAAOtG,GACjC,GAAIsG,EAAMV,QACN,GAAqB,MAAjBwJ,EACA3N,EAAOzB,GAAS,IAAI4L,GAAQ,CAAEE,YAAY,EAAM0D,KAAM,YAEnD,GAAIzU,EAAQiF,GACfyB,EAAOzB,GAAS,IAAI4L,GAAQ,CAAEE,YAAY,EAAM0D,KAAMJ,EAAcG,YAGpE,IACI9N,EAAOzB,GAASoP,EAAcG,I,CAChC,MAAOjR,GACLmD,EAAOzB,GAAS1B,C,MAIxB,IACImD,EAAOzB,GAASqP,EAAiBC,I,CACnC,MAAOhR,GACLmD,EAAOzB,GAAS1B,C,CAKxB,GAAIgI,EAAM1L,MAA8B,MAAtB6G,EAAO6E,EAAM1L,MAAe,CAC1C,IAAMQ,EAAQqG,EAAOzB,GAGjB5E,aAAiB4F,MACjBC,OAAOC,eAAeO,EAAQ6E,EAAM1L,KAAM,CACtCuG,YAAY,EACZrF,IAAK,WAAQ,MAAMoQ,GAAgB,YAAD7P,OAAcyJ,KAAKE,UAAUM,EAAM1L,OAAUQ,EAAQ,IAG3FqG,EAAO6E,EAAM1L,MAAQQ,C,CAGjC,IAGA,IADA,IAAAgG,EAAA,SAAAC,GAEI,IAAMjG,EAAQqG,EAAOJ,GACjBjG,aAAiB4F,OACjBC,OAAOC,eAAeO,EAAQJ,EAAG,CAC7BF,YAAY,EACZrF,IAAK,WAAQ,MAAMoQ,GAAgB,SAAD7P,OAAWgF,GAAMjG,EAAQ,G,EAL9DiG,EAAI,EAAGA,EAAII,EAAOvF,OAAQmF,IAAGD,EAAAC,GAUtC,OAAOJ,OAAOK,OAAOG,EACzB,GAGA,CAAAtG,IAAA,mBAAAC,MACA,SAAiBqU,GACb,IAAIvF,EAAWjP,KAAK0S,YAAY8B,EAAGzT,KAAKyG,UAAU,EAAG,IAAIgL,eAEzD,OAAKvD,EAEE,IAAIsB,GAAuB,CAC9BkE,KAAMzU,KAAK+S,UAAU9O,OAAOgL,EAAS5B,OAAQ,KAAOmH,EAAGzT,KAAKyG,UAAU,KACtE0L,iBAAkBjE,EAClBtP,KAAMsP,EAAStP,KACfoR,UAAW9B,EAASvE,SACpBd,QAAS5J,KAAKkS,WAAWjD,GACzB9O,MAAOsB,EAAAA,GAAAA,KAAe+S,EAAGrU,OAAS,OARd,IAU5B,GAMA,CAAAD,IAAA,WAAAC,MACA,SAASiO,GACL,IAAIa,EAAWjP,KAAK8S,SAAS1E,EAAIqF,OAAO,IAExC,OAAKxE,GAAYA,EAAS7B,UAAoB,KAOxC,IAAIgD,GAAe,CACrByC,cAAe5D,EACftP,KAAMsP,EAAStP,KACfoR,UAAW9B,EAASvE,SACpBgK,MAAO1U,KAAKyS,cAAcxD,GAC1BwF,KAAMzU,KAAK2U,eAAe1F,EAAUb,EAAIrN,KAAMqN,EAAIqF,SAE1D,GAAC,CAAAvT,IAAA,aAAAC,MAED,SAAWY,GACP,IAAM6T,GAAU1S,EAAAA,EAAAA,IAAQnB,GACpBkO,EAAWjP,KAAK2S,SAASiC,EAAQpN,UAAU,EAAG,IAAIgL,eAEtD,OAAKvD,EAEE,IAAIwB,GAAiB,CACxBgE,KAAMzU,KAAK+S,UAAU9O,OAAOgL,EAAS5B,OAAQ,KAAOuH,EAAQpN,UAAU,KACtEqN,cAAe5F,EACftP,KAAMsP,EAAStP,KACfoR,UAAW9B,EAASvE,SACpBd,QAAS5J,KAAKkS,WAAWjD,KAPL,IAS5B,IAGA,EAAA/O,IAAA,cAAAC,MA3gBA,WACI,OAAOsP,EACX,GAAC,CAAAvP,IAAA,aAAAC,MAED,SAAkB2U,GACd,OAAO1R,EAAAA,EAAAA,IAAW0R,EACtB,GAAC,CAAA5U,IAAA,aAAAC,MAED,SAAkB8O,GACd,OAAO8F,EAAAA,EAAAA,KAAapB,EAAAA,EAAAA,IAAG1E,EAASvE,UAAW,EAAG,EAClD,GAAC,CAAAxK,IAAA,gBAAAC,MAED,SAAqB0S,GACjB,OAAOc,EAAAA,EAAAA,IAAGd,EAAcnI,SAC5B,GAAC,CAAAxK,IAAA,cAAAC,MAygBD,SAAmBA,GACf,SAAUA,IAASA,EAAM6U,aAC7B,KAAC5D,CAAA,CA3nBiB,G,2UC/DhB5R,GAAS,IAAIC,EAAAA,GCdI,mBD8GjBwV,GAAuD,CACzDC,SAAS,EAAMnU,MAAM,EAAMgP,MAAM,EAAMoF,UAAU,EAAMC,UAAS,EAAMC,OAAO,EAAMC,IAAI,EAAMnV,OAAO,EACpGP,MAAM,EAAM2V,YAAY,EACxBC,cAAc,EAAMC,sBAAsB,EAC1CC,YAAY,EACZC,iBAAiB,GAGrB,SAAeC,GAAYC,EAA6BC,G,wIACvC,O,SAAMA,EAAa,OAMhC,MAJqB,kBAFfnW,EAAIoW,EAAAC,OAGNxW,GAAOa,mBAAmB,8BAA+B,OAAQV,GAGrEoW,EAAAE,KAAA,EAAAF,EAAAG,OAAA,UAEW9S,EAAAA,EAAAA,IAAWzD,IAAK,OAAAoW,EAAAE,KAAA,EAAAF,EAAAI,GAAAJ,EAAA,iBASX,OANXF,GACDrW,GAAOkC,WAAW,sDAAuDjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC1G2K,UAAW,gBAElB2L,EAAAK,KAAA,GAEqBP,EAASD,YAAYjW,GAAK,QAI/C,OAFc,OAFTmV,EAAOiB,EAAAC,OAGTxW,GAAOa,mBAAmB,kDAAmD,OAAQV,GACxFoW,EAAAG,OAAA,SAEMpB,GAAO,yBAAAiB,EAAAM,OAAA,GAAAC,EAAA,iB,CAIlB,SAAeC,GAAiBV,EAA6B1V,EAAYqW,G,oIACjElS,MAAMC,QAAQiS,GAAY,CAAFC,EAAAL,KAAA,QACjB,OADiBK,EAAAL,KAAA,EACXM,QAAQC,IAAIH,EAAU/R,KAAI,SAAC+R,EAAWzR,GAC/C,OAAOwR,GACHV,EACEvR,MAAMC,QAAQpE,GAAUA,EAAM4E,GAAQ5E,EAAMqW,EAAU7W,MACxD6W,EAER,KAAG,OAIsC,OAI2B,QAU8B,eAAAC,EAAAP,OAAA,SAAAO,EAAAT,MAlB/F,UAGgB,YAAnBQ,EAAU5W,KAAkB,CAAA6W,EAAAL,KAAA,QACrB,OADqBK,EAAAL,KAAA,EACfR,GAAYC,EAAU1V,GAAM,UAGtB,UAAnBqW,EAAU5W,KAAgB,CAAA6W,EAAAL,KAAA,SACnB,OADmBK,EAAAL,KAAA,GACbG,GAAiBV,EAAU1V,EAAOqW,EAAUhM,YAAW,WAG7C,UAAvBgM,EAAU7Q,SAAoB,CAAA8Q,EAAAL,KAAA,YACzB9R,MAAMC,QAAQpE,GAAQ,CAAFsW,EAAAL,KAAA,gBAAAK,EAAAP,OAAA,SACdQ,QAAQE,OAAOpX,GAAOqX,UAAU,0BAA2BpX,EAAAA,GAAAA,OAAAA,iBAAgC,CAC9FiF,SAAU,QACVvE,MAAAA,MACD,QAEA,OAFAsW,EAAAL,KAAA,GAEMM,QAAQC,IAAIxW,EAAMsE,KAAI,SAACmD,GAAC,OAAK2O,GAAiBV,EAAUjO,EAAG4O,EAAUlM,cAAc,KAAE,eAAAmM,EAAAP,OAAA,SAG/F/V,GAAK,yBAAAsW,EAAAJ,OAAA,GAAAS,EAAA,I,CAGhB,SAAeC,GAAoBC,EAAoB/H,EAA4BwF,G,+JA0C9D,OAxCbwC,EAA2B,CAAC,EAC5BxC,EAAKxT,SAAWgO,EAAS5B,OAAOpM,OAAS,GAAuC,kBAA3BwT,EAAKA,EAAKxT,OAAS,KACxEgW,GAAYC,EAAAA,EAAAA,IAAYzC,EAAKZ,QAIjCrU,GAAOkH,mBAAmB+N,EAAKxT,OAAQgO,EAAS5B,OAAOpM,OAAQ,sBAG3D+V,EAASG,OACLF,EAAUlH,KAGVkH,EAAUlH,MAAOqH,EAAAA,EAAAA,IAAkB,CAC/BC,SAAUzB,GAAYoB,EAASG,OAAQF,EAAUlH,MACjDoH,OAAQH,EAASG,OAAO/T,eACzBkU,MAAK,SAAOC,GAAK,OAAIC,GAAA3V,OAAA,UAAA4V,EAAAA,EAAAA,KAAAC,MAAA,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAtG,MAAA,SAAAyG,GAAA,cAAAA,EAAA3B,KAAA2B,EAAAxB,MAAA,OAKnB,OAJGhT,EAAAA,EAAAA,IAAWmU,EAAMJ,UAAYI,EAAMF,UACnC7X,GAAOkC,WAAW,8CAA+CjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAClG2K,UAAW,mBAElBwN,EAAA1B,OAAA,SAEMqB,EAAMF,UAAQ,wBAAAO,EAAAvB,OAAA,GAAAsB,EAAA,IACxB,IAGDV,EAAUlH,KAAOiH,EAASG,OAAO/T,aAG9B6T,EAAUlH,OACjBkH,EAAUlH,KAAO6F,GAAYoB,EAASa,SAAUZ,EAAUlH,OAQ9D+H,EAAA1B,KAAA,GACuBgB,EAAAA,EAAAA,IAAkB,CACrC3C,KAAM8B,GAAiBS,EAASG,QAAUH,EAASa,SAAUpD,EAAMxF,EAAS5B,QAC5EyH,QAASkC,EAASe,gBAClBd,WAAYG,EAAAA,EAAAA,IAAkBH,IAAc,CAAC,IAC/C,OAwBF,GA5BMe,EAAQF,EAAA9B,KAORjV,EAAOiW,EAASiB,UAAUC,mBAAmBjJ,EAAU+I,EAASvD,MAChED,EAA2B,CAC/BzT,KAAMA,EACNuU,GAAI0C,EAASlD,SAOC,OAHVqD,EAAKH,EAASf,WAGb5B,QAAiBb,EAAGa,MAAQ5T,EAAAA,GAAAA,KAAe0W,EAAG9C,OAAOxS,YACzC,MAAfsV,EAAGhD,WAAoBX,EAAGW,SAAW1T,EAAAA,GAAAA,KAAe0W,EAAGhD,WACxC,MAAfgD,EAAG/C,WAAoBZ,EAAGY,SAAW3T,EAAAA,GAAAA,KAAe0W,EAAG/C,WACpC,MAAnB+C,EAAG3C,eAAwBhB,EAAGgB,aAAe/T,EAAAA,GAAAA,KAAe0W,EAAG3C,eACpC,MAA3B2C,EAAG1C,uBAAgCjB,EAAGiB,qBAAuBhU,EAAAA,GAAAA,KAAe0W,EAAG1C,uBACpE,MAAX0C,EAAGpI,OAAgByE,EAAGzE,KAAOoI,EAAGpI,MAErB,MAAXoI,EAAGvY,OAAgB4U,EAAG5U,KAAOuY,EAAGvY,MACf,MAAjBuY,EAAG5C,aAAsBf,EAAGe,YAAa6C,EAAAA,GAAAA,IAAcD,EAAG5C,aAG3C,MAAff,EAAGW,UAAoC,MAAhBlG,EAASpB,IAAa,CAQ7C,IAFIwK,EAAY,KACVhX,GAAQC,EAAAA,EAAAA,IAASP,GACdqF,EAAI,EAAGA,EAAI/E,EAAMJ,OAAQmF,IAC9BiS,GAAa,EACThX,EAAM+E,KAAMiS,GAAa,IAEjC7D,EAAGW,SAAW1T,EAAAA,GAAAA,KAAewN,EAASpB,KAAK1F,IAAIkQ,E,CA+ClD,OA3CGF,EAAGhY,SACGmY,EAAU7W,EAAAA,GAAAA,KAAe0W,EAAGhY,QACrByG,UAAaqI,EAAShB,SAC/BzO,GAAOkC,WAAW,2CAA4CjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC/F2K,UAAW,kBACXjK,MAAO8W,EAAU9W,QAGzBqU,EAAGrU,MAAQmY,GAGXH,EAAGzC,aACHlB,EAAGkB,YAAawB,EAAAA,EAAAA,IAAYiB,EAAGzC,aAG/ByC,EAAGxC,kBACHnB,EAAGmB,kBAAoBwC,EAAGxC,wBAIvBsB,EAAU5B,aACV4B,EAAU9B,gBACV8B,EAAU7B,gBACV6B,EAAUlH,YACVkH,EAAU9W,aAEV8W,EAAUrX,YACVqX,EAAU1B,kBAEV0B,EAAUzB,oBACVyB,EAAUxB,4BAEVwB,EAAUvB,kBACVuB,EAAUtB,iBAIX4C,EAAYvS,OAAOoM,KAAK6E,GAAW1F,QAAO,SAACrR,GAAG,OAA+B,MAAnB+W,EAAW/W,EAAY,KACzEe,QACVzB,GAAOkC,WAAW,mBAADN,OAAqBmX,EAAU9T,KAAI,SAAC+T,GAAC,OAAK3N,KAAKE,UAAUyN,EAAE,IAAEzP,KAAK,MAAStJ,EAAAA,GAAAA,OAAAA,sBAAqC,CAC7H2K,UAAW,YACX6M,UAAWsB,IAElBT,EAAA5B,OAAA,SAEM1B,GAAE,yBAAAsD,EAAAzB,OAAA,GAAAoC,EAAA,I,CAwBb,SAASC,GAAgB1B,EAAoBxC,GACzC,IAAMmE,EAAOnE,EAAGmE,KAAKC,KAAKpE,GAC1BA,EAAGmE,KAAO,SAACE,GACP,OAAOF,EAAKE,GAAevB,MAAK,SAACwB,GAiC7B,OAhCAA,EAAQjH,OAASiH,EAAQC,KAAKtU,KAAI,SAAC2J,GAC/B,IAAI4K,GAAuBC,EAAAA,EAAAA,IAAS7K,GAChC8K,EAAyB,KAC7B,IACIA,EAASlC,EAASiB,UAAUkB,SAAS/K,E,CACvC,MAAOgL,GAAG,CAwBZ,OArBIF,IACAF,EAAMvE,KAAOyE,EAAOzE,KACpBuE,EAAM/U,OAAS,SAAClD,EAAiB0S,GAC7B,OAAOuD,EAASiB,UAAUtD,eAAeuE,EAAOrG,cAAe9R,EAAM0S,EACzE,EACAuF,EAAMA,MAAQE,EAAOvZ,KACrBqZ,EAAMK,eAAiBH,EAAOnI,WAIlCiI,EAAMM,eAAiB,WAAQ,OAAOtC,EAASa,QAAU,EACzDmB,EAAMO,SAAW,WACb,OAAOvC,EAASa,SAAS0B,SAAST,EAAQU,UAC9C,EACAR,EAAMS,eAAiB,WACnB,OAAOzC,EAASa,SAAS4B,eAAeX,EAAQY,gBACpD,EACAV,EAAMW,sBAAwB,WAC1B,OAAOjD,QAAQkD,QAAQd,EAC3B,EAEOE,CACX,IAEOF,CACX,GACJ,CACJ,CAEA,SAASe,GAAU7C,EAAoB/H,EAA4B6K,GAC/D,IAAMC,EAAoB/C,EAASG,QAAUH,EAASa,SAEtD,OAAO,WAAkC,QAAAmC,EAAA7M,UAAAlM,OAAhBwT,EAAgB,IAAAnQ,MAAA0V,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhBxF,EAAgBwF,GAAA9M,UAAA8M,G,8IAEb,GAApBC,OAAWpW,EACX2Q,EAAKxT,SAAWgO,EAAS5B,OAAOpM,OAAS,GAAuC,kBAA3BwT,EAAKA,EAAKxT,OAAS,GAAgB,CAAAkZ,EAAA/D,KAAA,QAC/C,GACf,OADpBa,GAAYC,EAAAA,EAAAA,IAAYzC,EAAKZ,QACrBqG,SAAgB,CAAAC,EAAA/D,KAAA,QACf,OADe+D,EAAA/D,KAAA,EACTa,EAAUiD,SAAQ,OAAnCA,EAAQC,EAAAnE,KAAA,cAELiB,EAAUiD,SACjBzF,EAAKzT,KAAKiW,GAAW,UAIS,MAA9BD,EAASoD,kBAAyB,CAAAD,EAAA/D,KAAA,SAClC,OADkC+D,EAAA/D,KAAA,GAC5BY,EAASqD,UAAUH,GAAS,QAI3B,OAJ2BC,EAAA/D,KAAA,GAIrBW,GAAoBC,EAAU/H,EAAUwF,GAAK,QAC/C,OADTD,EAAE2F,EAAAnE,KAAAmE,EAAA/D,KAAG,GACU2D,EAAiB5W,KAAKqR,EAAI0F,GAAS,QAMnD,OANC1T,EAAM2T,EAAAnE,KAAAmE,EAAAlE,KAAG,GAGP9V,EAAQ6W,EAASiB,UAAUqC,qBAAqBrL,EAAUzI,GAC1DsT,GAA8C,IAA5B7K,EAASN,QAAQ1N,SACnCd,EAAQA,EAAM,IACjBga,EAAAjE,OAAA,SACM/V,GAAK,QAOX,MAPWga,EAAAlE,KAAA,GAAAkE,EAAAhE,GAAAgE,EAAA,UAGRA,EAAAhE,GAAMzQ,OAASjG,EAAAA,GAAAA,OAAAA,iBACf0a,EAAAhE,GAAMrB,QAAUkC,EAASlC,QACzBqF,EAAAhE,GAAM1B,KAAOA,EACb0F,EAAAhE,GAAMoE,YAAc/F,GACvB2F,EAAAhE,GAAA,yBAAAgE,EAAA9D,OAAA,GAAAmE,EAAA,mB,CAIb,CA0BA,SAASC,GAAazD,EAAoB/H,EAA4B6K,GAClE,OAAI7K,EAASjB,SACF6L,GAAU7C,EAAU/H,EAAU6K,GA1B7C,SAAmB9C,EAAoB/H,GACnC,OAAO,WAAkC,QAAAyL,EAAAvN,UAAAlM,OAAhBwT,EAAgB,IAAAnQ,MAAAoW,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhBlG,EAAgBkG,GAAAxN,UAAAwN,G,wIAOrC,GANK3D,EAASG,QACV3X,GAAOkC,WAAW,0CAA2CjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC9F2K,UAAW,oBAKe,MAA9B4M,EAASoD,kBAAyB,CAAAQ,EAAAxE,KAAA,QAClC,OADkCwE,EAAAxE,KAAA,EAC5BY,EAASqD,YAAW,OAGZ,OAHYO,EAAAxE,KAAA,EAGNW,GAAoBC,EAAU/H,EAAUwF,GAAK,OAE1D,OAFLoG,EAASD,EAAA5E,KAAA4E,EAAAxE,KAAG,EAEDY,EAASG,OAAO2D,gBAAgBD,GAAU,OAG7B,OAHxBrG,EAAEoG,EAAA5E,KAGR0C,GAAgB1B,EAAUxC,GAAIoG,EAAA1E,OAAA,SAEvB1B,GAAE,yBAAAoG,EAAAvE,OAAA,GAAA0E,EAAA,I,CAEjB,CAMWC,CAAUhE,EAAU/H,EAC/B,CAEA,SAASgM,GAAY1J,GACjB,OAAIA,EAAOuD,SAA6B,MAAjBvD,EAAOkC,QAA2C,IAAzBlC,EAAOkC,OAAOxS,QAItDsQ,EAAOuD,SAAW,KAAO,KAAOvD,EAAOkC,OAASlC,EAAOkC,OAAOhP,KAAI,SAACiQ,GACvE,OAAIpQ,MAAMC,QAAQmQ,GACPA,EAAM3L,KAAK,KAEf2L,CACX,IAAG3L,KAAK,KAAM,IARH,GASf,CAAC,IAEKmS,GAAY,WAKd,SAAAA,EAAYC,EAAa5J,IAAmBxR,EAAAA,EAAAA,GAAA,KAAAmb,IACxC1a,EAAAA,EAAAA,IAAeR,KAAM,MAAOmb,IAC5B3a,EAAAA,EAAAA,IAAeR,KAAM,SAAUuR,GAC/BvR,KAAKob,WAAa,EACtB,CAmDC,OAnDAnb,EAAAA,EAAAA,GAAAib,EAAA,EAAAhb,IAAA,cAAAC,MAED,SAAYkb,EAAoBC,GAC5Btb,KAAKob,WAAWpa,KAAK,CAAEqa,SAAUA,EAAUC,KAAMA,GACrD,GAAC,CAAApb,IAAA,iBAAAC,MAED,SAAekb,GACX,IAAIE,GAAO,EACXvb,KAAKob,WAAapb,KAAKob,WAAW7J,QAAO,SAACiK,GACtC,SAAID,GAAQC,EAAKH,WAAaA,KAC9BE,GAAO,GACA,EACX,GACJ,GAAC,CAAArb,IAAA,qBAAAC,MAED,WACIH,KAAKob,WAAa,EACtB,GAAC,CAAAlb,IAAA,YAAAC,MAED,WACI,OAAOH,KAAKob,WAAW3W,KAAI,SAAC2B,GAAC,OAAKA,EAAEiV,QAAQ,GAChD,GAAC,CAAAnb,IAAA,gBAAAC,MAED,WACI,OAAOH,KAAKob,WAAWna,MAC3B,GAAC,CAAAf,IAAA,MAAAC,MAED,SAAIsU,GAAgB,IAAA3E,EAAA,KACV2L,EAAgBzb,KAAKyb,gBAc3B,OAbAzb,KAAKob,WAAapb,KAAKob,WAAW7J,QAAO,SAACiK,GAEtC,IAAME,EAAWjH,EAAKjT,QAQtB,OALAma,YAAW,WACPH,EAAKH,SAASnO,MAAM4C,EAAM4L,EAC9B,GAAG,IAGMF,EAAKF,IAClB,IAEOG,CACX,GAAC,CAAAvb,IAAA,eAAAC,MAED,SAAa6Y,GACb,GAEA,CAAA9Y,IAAA,UAAAC,MACA,SAAQ6Y,GACJ,MAAO,CAAEA,EACb,KAACkC,CAAA,CA5Da,GA+DZU,GAAkB,SAAAC,IAAA7Y,EAAAA,EAAAA,GAAA4Y,EAAAC,GAAA,IAAA5Y,GAAAC,EAAAA,EAAAA,GAAA0Y,GACpB,SAAAA,IAAA,OAAA7b,EAAAA,EAAAA,GAAA,KAAA6b,GAAA3Y,EAAAE,KAAA,KACU,QAAS,KACnB,CAAC,OAAAlD,EAAAA,EAAAA,GAAA2b,EAAA,CAHmB,CAAQV,IAa1BY,GAAqB,SAAAC,IAAA/Y,EAAAA,EAAAA,GAAA8Y,EAAAC,GAAA,IAAA9U,GAAA/D,EAAAA,EAAAA,GAAA4Y,GAKvB,SAAAA,EAAYhH,EAAiBkH,EAA8B/M,EAAyBwE,GAAoC,IAAAzD,GAAAjQ,EAAAA,EAAAA,GAAA,KAAA+b,GACpH,IAAMvK,EAAsB,CACxBuD,QAASA,GAGTJ,EAAQsH,EAAkBvJ,cAAcxD,GAWD,OAVvCwE,GACIiB,IAAUjB,EAAO,IAAMjU,GAAOa,mBAAmB,iBAAkB,SAAUoT,GACjFlC,EAAOkC,OAASA,EAAOjS,SAEvB+P,EAAOkC,OAAS,CAAEiB,GAGtB1E,EAAA/I,EAAA9D,KAAA,KAAM8X,GAAY1J,GAASA,IAC3B/Q,EAAAA,EAAAA,KAAcyb,EAAAA,EAAAA,GAAAjM,GAAO,UAAW8E,IAChCtU,EAAAA,EAAAA,KAAcyb,EAAAA,EAAAA,GAAAjM,GAAO,YAAagM,IAClCxb,EAAAA,EAAAA,KAAcyb,EAAAA,EAAAA,GAAAjM,GAAO,WAAYf,GAAUe,CAC/C,CA4BC,OA5BA/P,EAAAA,EAAAA,GAAA6b,EAAA,EAAA5b,IAAA,eAAAC,MAGD,SAAa6Y,GAAY,IAAA9I,EAAA,MACrBhJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAA2U,EAAA1U,WAAA,qBAAAjE,KAAA,KAAmB6V,GAEnBA,EAAMA,MAAQhZ,KAAKiP,SAAStP,KAC5BqZ,EAAMK,eAAiBrZ,KAAKiP,SAASvE,SAErCsO,EAAM/U,OAAS,SAAClD,EAAiB0S,GAC7B,OAAOvD,EAAK+H,UAAUtD,eAAezE,EAAKjB,SAAUlO,EAAM0S,EAC9D,EAEA,IACIuF,EAAMvE,KAAOzU,KAAKiY,UAAUtD,eAAe3U,KAAKiP,SAAU+J,EAAMjY,KAAMiY,EAAMvF,O,CAC9E,MAAOpQ,GACL2V,EAAMvE,KAAO,KACbuE,EAAMkD,YAAc7Y,C,CAE5B,GAAC,CAAAnD,IAAA,UAAAC,MAED,SAAQ6Y,GACJ,IAAMlH,EdtjBR,SAA4BtL,GAE9B,IAAMsL,EAAgE,GAiBtE,OAfoB,SAAdqK,EAAuBC,EAA8B3S,GACvD,GAAKnF,MAAMC,QAAQkF,GACnB,IAAK,IAAIvJ,KAAOuJ,EAAQ,CACpB,IAAM4S,EAAYD,EAAK5a,QACvB6a,EAAUrb,KAAKd,GAEf,IACKic,EAAYE,EAAW5S,EAAOvJ,G,CACjC,MAAOmD,GACLyO,EAAO9Q,KAAK,CAAEob,KAAMC,EAAWhZ,MAAOA,G,EAGlD,CACA8Y,CAAY,GAAK3V,GAEVsL,CAEX,CciiBuBwK,CAAkBtD,EAAMvE,MACvC,GAAI3C,EAAO7Q,OAAU,MAAM6Q,EAAO,GAAGzO,MAErC,IAAMoR,GAAQuE,EAAMvE,MAAQ,IAAIjT,QAEhC,OADAiT,EAAKzT,KAAKgY,GACHvE,CACX,KAACqH,CAAA,CAlDsB,CAAQZ,IA0D7BqB,GAAqB,SAAAC,IAAAxZ,EAAAA,EAAAA,GAAAuZ,EAAAC,GAAA,IAAA9N,GAAAxL,EAAAA,EAAAA,GAAAqZ,GAIvB,SAAAA,EAAYzH,EAAiBkH,GAA4B,IAAAS,EAGA,OAHA1c,EAAAA,EAAAA,GAAA,KAAAwc,GACrDE,EAAA/N,EAAAvL,KAAA,KAAM,IAAK,CAAE2R,QAASA,KACtBtU,EAAAA,EAAAA,KAAcyb,EAAAA,EAAAA,GAAAQ,GAAO,UAAW3H,IAChCtU,EAAAA,EAAAA,KAAcyb,EAAAA,EAAAA,GAAAQ,GAAO,YAAaT,GAAmBS,CACzD,CAkBC,OAlBAxc,EAAAA,EAAAA,GAAAsc,EAAA,EAAArc,IAAA,eAAAC,MAED,SAAa6Y,GAAY,IAAA0D,EAAA,MACrBxV,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,GAAAoV,EAAAnV,WAAA,qBAAAjE,KAAA,KAAmB6V,GAEnB,IACI,IAAME,EAASlZ,KAAKiY,UAAUkB,SAASH,GACvCA,EAAMA,MAAQE,EAAOvZ,KACrBqZ,EAAMK,eAAiBH,EAAOnI,UAE9BiI,EAAM/U,OAAS,SAAClD,EAAiB0S,GAC7B,OAAOiJ,EAAKzE,UAAUtD,eAAeuE,EAAOrG,cAAe9R,EAAM0S,EACrE,EAEAuF,EAAMvE,KAAOyE,EAAOzE,I,CACtB,MAAOpR,GACL,CAER,KAACkZ,CAAA,CA1BsB,CAAQrB,IAkCtByB,GAAY,WA8BrB,SAAAA,EAAYC,EAAuBZ,EAAsCjC,GAAoC,IAAA8C,EAAA,MAAA9c,EAAAA,EAAAA,GAAA,KAAA4c,IAGzGnc,EAAAA,EAAAA,IAAeR,KAAM,aAAawR,EAAAA,EAAAA,IAAS,gBAAAmL,EAAA,KAAAlL,iBAAA,EAA4B,eAArCD,CAAqDwK,IAE/D,MAApBjC,IACAvZ,EAAAA,EAAAA,IAAeR,KAAM,WAAY,OACjCQ,EAAAA,EAAAA,IAAeR,KAAM,SAAU,OACxB8c,GAAAA,EAAAA,SAAgB/C,KACvBvZ,EAAAA,EAAAA,IAAeR,KAAM,WAAY+Z,EAAiBlC,UAAY,OAC9DrX,EAAAA,EAAAA,IAAeR,KAAM,SAAU+Z,IACxBgD,GAAAA,GAAAA,WAAoBhD,KAC3BvZ,EAAAA,EAAAA,IAAeR,KAAM,WAAY+Z,IACjCvZ,EAAAA,EAAAA,IAAeR,KAAM,SAAU,OAE/BR,GAAOa,mBAAmB,6BAA8B,mBAAoB0Z,IAGhFvZ,EAAAA,EAAAA,IAAeR,KAAM,aAAc,CAAC,IACpCQ,EAAAA,EAAAA,IAAeR,KAAM,cAAe,CAAC,IACrCQ,EAAAA,EAAAA,IAAeR,KAAM,YAAa,CAAC,IACnCQ,EAAAA,EAAAA,IAAeR,KAAM,sBAAuB,CAAC,IAE7CQ,EAAAA,EAAAA,IAAeR,KAAM,UAAW,CAAC,GAG7B,IAAMgd,EAAqD,CAAC,EA+BhE,GA9BIhX,OAAOoM,KAAKpS,KAAKiY,UAAUpG,QAAQ/M,SAAQ,SAACuU,GACxC,IAAML,EAAQ6D,EAAK5E,UAAUpG,OAAOwH,IACpC7Y,EAAAA,EAAAA,IAAeqc,EAAKI,QAAS5D,GAAgB,WAAwB,QAAA6D,EAAA/P,UAAAlM,OAApBwT,EAAgB,IAAAnQ,MAAA4Y,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhB1I,EAAgB0I,GAAAhQ,UAAAgQ,GAC7D,MAAO,CACHrI,QAAS+H,EAAK/H,QACdrB,OAAQoJ,EAAK5E,UAAUmF,mBAAmBpE,EAAOvE,GAEzD,IACKuI,EAAchE,EAAMrZ,QAASqd,EAAchE,EAAMrZ,MAAQ,IAC9Dqd,EAAchE,EAAMrZ,MAAMqB,KAAKqY,EACnC,IAEArT,OAAOoM,KAAK4K,GAAelY,SAAQ,SAACnF,GAChC,IAAMsd,EAAUD,EAAcrd,GACP,IAAnBsd,EAAQhc,QACRT,EAAAA,EAAAA,IAAeqc,EAAKI,QAAStd,EAAMkd,EAAKI,QAAQA,EAAQ,KAExDzd,GAAOmO,KAAK,2BAADvM,OAA6BzB,EAAK,MAAAyB,OAAM6b,EAAQlU,KAAK,MAAK,KAE7E,KAGJvI,EAAAA,EAAAA,IAAeR,KAAM,iBAAkB,CAAC,IACxCQ,EAAAA,EAAAA,IAAeR,KAAM,gBAAiB,CAAC,GAElB,MAAjB4c,GACApd,GAAOa,mBAAmB,uCAAwC,gBAAiBuc,IAGvFpc,EAAAA,EAAAA,IAAeR,KAAM,UAAW4c,GAC5B5c,KAAK6X,UACLrX,EAAAA,EAAAA,IAAeR,KAAM,kBAAmB4V,GAAY5V,KAAK6X,SAAU+E,SAEnE,KACIpc,EAAAA,EAAAA,IAAeR,KAAM,kBAAmB0W,QAAQkD,SAAQxW,EAAAA,EAAAA,IAAWwZ,I,CACrE,MAAOvZ,GAEL7D,GAAOkC,WAAW,2DAA4DjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC/G2K,UAAW,gB,CAMvBpK,KAAK+X,gBAAgBsF,OAAM,SAACjE,GAAQ,IAEpC,IAAMxT,EAAmD,CAAC,EACpD0X,EAAuD,CAAC,EAC9DtX,OAAOoM,KAAKpS,KAAKiY,UAAUrG,WAAW9M,SAAQ,SAACiM,GAC3C,IAAM9B,EAAW4N,EAAK5E,UAAUrG,UAAUb,GAI1C,GAAIuM,EAAiBvM,GACjBvR,GAAOmO,KAAK,2BAADvM,OAA6ByJ,KAAKE,UAAUgG,SAD3D,CAIAuM,EAAiBvM,IAAa,EAK1B,IAAMpR,EAAOsP,EAAStP,KACjBiG,EAAY,IAADxE,OAAMzB,MAAYiG,EAAY,IAADxE,OAAMzB,IAAW,IAC9DiG,EAAY,IAADxE,OAAMzB,IAASqB,KAAK+P,GAGA,MAApB8L,EAAM9L,KACjBvQ,EAAAA,EAAAA,IAAyBqc,EAAM9L,EAAW0J,GAAaoC,EAAM5N,GAAU,IAM1C,MAA7B4N,EAAKjL,UAAUb,KACfvQ,EAAAA,EAAAA,IAAeqc,EAAKjL,UAAWb,EAAW0J,GAAaoC,EAAM5N,GAAU,IAGzC,MAA9B4N,EAAKU,WAAWxM,KAChBvQ,EAAAA,EAAAA,IAAeqc,EAAKU,WAAYxM,EAAW8I,GAAUgD,EAAM5N,GAAU,IAG9B,MAAvC4N,EAAK9F,oBAAoBhG,KACzBvQ,EAAAA,EAAAA,IAAeqc,EAAK9F,oBAAqBhG,EAvczD,SAAuBiG,EAAoB/H,GACvC,OAAO,WAA4B,QAAAuO,EAAArQ,UAAAlM,OAAhBwT,EAAgB,IAAAnQ,MAAAkZ,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhBhJ,EAAgBgJ,GAAAtQ,UAAAsQ,GAC/B,OAAO1G,GAAoBC,EAAU/H,EAAUwF,EACnD,CACJ,CAmcoEiJ,CAAcb,EAAM5N,IAGzC,MAA/B4N,EAAKc,YAAY5M,KACjBvQ,EAAAA,EAAAA,IAAeqc,EAAKc,YAAa5M,EArcjD,SAAuBiG,EAAoB/H,GACvC,IAAM8K,EAAoB/C,EAASG,QAAUH,EAASa,SACtD,OAAO,WAAkC,QAAA+F,EAAAzQ,UAAAlM,OAAhBwT,EAAgB,IAAAnQ,MAAAsZ,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhBpJ,EAAgBoJ,GAAA1Q,UAAA0Q,G,sIAO1B,OANN9D,GACDva,GAAOkC,WAAW,wCAAyCjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC5F2K,UAAW,gBAElB0T,EAAA1H,KAAA,EAEgBW,GAAoBC,EAAU/H,EAAUwF,GAAK,OACvD,OADDD,EAAEsJ,EAAA9H,KAAA8H,EAAA1H,KAAG,EACE2D,EAAiB4D,YAAYnJ,GAAG,cAAAsJ,EAAA5H,OAAA,SAAA4H,EAAA9H,MAAA,wBAAA8H,EAAAzH,OAAA,GAAA0H,EAAA,I,CAErD,CAyb4DC,CAAcnB,EAAM5N,G,CAExE,IAEAjJ,OAAOoM,KAAKxM,GAAad,SAAQ,SAACnF,GAE9B,IAAMse,EAAarY,EAAYjG,GAC/B,KAAIse,EAAWhd,OAAS,GAAxB,CAGAtB,EAAOA,EAAK6H,UAAU,GAEtB,IAAMuJ,EAAYkN,EAAW,GAG7B,IACkC,MAAfpB,EAAMld,KACjBa,EAAAA,EAAAA,IAAyBqc,EAAMld,EAAiBkd,EAAM9L,G,CAE5D,MAAOqI,GAAI,CAEe,MAAxByD,EAAKjL,UAAUjS,KACfa,EAAAA,EAAAA,IAAeqc,EAAKjL,UAAWjS,EAAMkd,EAAKjL,UAAUb,IAG3B,MAAzB8L,EAAKU,WAAW5d,KAChBa,EAAAA,EAAAA,IAAeqc,EAAKU,WAAY5d,EAAMkd,EAAKU,WAAWxM,IAGpB,MAAlC8L,EAAK9F,oBAAoBpX,KACzBa,EAAAA,EAAAA,IAAeqc,EAAK9F,oBAAqBpX,EAAMkd,EAAK9F,oBAAoBhG,IAG9C,MAA1B8L,EAAKc,YAAYhe,KACjBa,EAAAA,EAAAA,IAAeqc,EAAKc,YAAahe,EAAMkd,EAAKc,YAAY5M,G,CAEhE,GACJ,CA4FC,OA5FA9Q,EAAAA,EAAAA,GAAA0c,EAAA,EAAAzc,IAAA,WAAAC,MAcD,WACI,OAAOH,KAAKqa,WAChB,GAAC,CAAAna,IAAA,YAAAC,MAED,SAAU+Z,GAAmB,IAAAgE,EAAA,KA0BzB,OAzBKle,KAAKme,mBAGFne,KAAKoa,kBACLpa,KAAKme,iBAAmBne,KAAKoa,kBAAkBzB,OAAOrB,MAAK,WACvD,OAAO4G,CACX,IAOAle,KAAKme,iBAAmBne,KAAK6X,SAASuG,QAAQpe,KAAK8U,QAASoF,GAAU5C,MAAK,SAAC5R,GAOxE,MANa,OAATA,GACAlG,GAAOkC,WAAW,wBAAyBjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAC5E4e,gBAAiBH,EAAKpJ,QACtB1K,UAAW,gBAGZ8T,CACX,KAIDle,KAAKme,gBAChB,GAMA,CAAAje,IAAA,WAAAC,MAEA,SAAS8W,GAA8B,IAAAqH,EAAA,KAC9Bte,KAAKmX,QACN3X,GAAOkC,WAAW,0CAA2CjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAAE2K,UAAW,8BAGnH,IAAMoK,GAAqC0C,EAAAA,EAAAA,IAAYD,GAAa,CAAC,GAQrE,MANA,CAAC,OAAQ,MAAMnS,SAAQ,SAAS5E,GACN,MAAZsU,EAAItU,IACdV,GAAOkC,WAAW,mBAAqBxB,EAAKT,EAAAA,GAAAA,OAAAA,sBAAqC,CAAE2K,UAAWlK,GAClG,IAEAsU,EAAGc,GAAKtV,KAAK+X,gBACN/X,KAAKue,WAAWjH,MAAK,WACxB,OAAOgH,EAAKnH,OAAO2D,gBAAgBtG,EACvC,GACJ,GAEA,CAAAtU,IAAA,UAAAC,MACA,SAAQ4Z,GAC6B,kBAAtBA,IACPA,EAAmB,IAAIyE,GAAAA,EAAWzE,EAAkB/Z,KAAK6X,WAG7D,IAAMb,EAAW,IAAyChX,KAAKyR,YAAczR,KAAK8U,QAAS9U,KAAKiY,UAAW8B,GAK3G,OAJI/Z,KAAKoa,oBACL5Z,EAAAA,EAAAA,IAAewW,EAAU,oBAAqBhX,KAAKoa,mBAGhDpD,CACX,GAEA,CAAA9W,IAAA,SAAAC,MACA,SAAOyc,GACH,OAAO,IAAyC5c,KAAKyR,YAAcmL,EAAe5c,KAAKiY,UAAWjY,KAAKmX,QAAUnX,KAAK6X,SAC1H,GAAC,CAAA3X,IAAA,yBAAAC,MAMO,SAAuBse,GAE3B,OAAIze,KAAK0e,eAAeD,EAAatD,KAC1Bnb,KAAK0e,eAAeD,EAAatD,KAEpCsD,CACZ,GAAC,CAAAve,IAAA,mBAAAC,MAEO,SAAiBwe,GACrB,GAA0B,kBAAfA,EAAyB,CAIhC,GAAkB,UAAdA,EACA,OAAO3e,KAAK4e,uBAAuB,IAAIhD,IAI3C,GAAkB,UAAd+C,EACA,OAAO3e,KAAK4e,uBAAuB,IAAI1D,GAAa,QAAS,OAIjE,GAAkB,MAAdyD,EACA,OAAO3e,KAAK4e,uBAAuB,IAAIrC,GAAqBvc,KAAK8U,QAAS9U,KAAKiY,YAInF,IAAMhJ,EAAWjP,KAAKiY,UAAUnF,SAAS6L,GACzC,OAAO3e,KAAK4e,uBAAuB,IAAI9C,GAAqB9b,KAAK8U,QAAS9U,KAAKiY,UAAWhJ,G,CAI9F,GAAI0P,EAAUlL,QAAUkL,EAAUlL,OAAOxS,OAAS,EAAG,CAGjD,IACI,IAAMyT,EAAQiK,EAAUlL,OAAO,GAC/B,GAAsB,kBAAXiB,EACP,MAAM,IAAI3O,MAAM,iBAEpB,IAAMkJ,EAAWjP,KAAKiY,UAAUnF,SAAS4B,GACzC,OAAO1U,KAAK4e,uBAAuB,IAAI9C,GAAqB9b,KAAK8U,QAAS9U,KAAKiY,UAAWhJ,EAAU0P,EAAUlL,Q,CAChH,MAAOpQ,GAAQ,CAGjB,IAAMkO,EAAsB,CACxBuD,QAAS9U,KAAK8U,QACdrB,OAAQkL,EAAUlL,QAGtB,OAAOzT,KAAK4e,uBAAuB,IAAI1D,GAAaD,GAAY1J,GAASA,G,CAG7E,OAAOvR,KAAK4e,uBAAuB,IAAIrC,GAAqBvc,KAAK8U,QAAS9U,KAAKiY,WACnF,GAAC,CAAA/X,IAAA,sBAAAC,MAED,SAAoBse,GAChB,GAAqC,IAAjCA,EAAahD,gBAAuB,QAC7Bzb,KAAK0e,eAAeD,EAAatD,KAGxC,IAAM0D,EAAO7e,KAAK8e,cAAcL,EAAatD,KACzC0D,GAAQJ,EAAalN,SACrBvR,KAAK6X,SAASkH,IAAIN,EAAalN,OAAQsN,UAChC7e,KAAK8e,cAAcL,EAAatD,K,CAGnD,GAGA,CAAAjb,IAAA,aAAAC,MACA,SAAWse,EAA4BrQ,EAAUiN,GAAkB,IAAA2D,EAAA,KACzDhG,GAAeC,EAAAA,EAAAA,IAAS7K,GAe9B,OAbA4K,EAAMM,eAAiB,WACd+B,IACLoD,EAAanF,eAAe+B,GAC5B2D,EAAKC,oBAAoBR,GAC7B,EAEAzF,EAAMO,SAAW,WAAQ,OAAOyF,EAAKnH,SAAS0B,SAASnL,EAAIoL,UAAY,EACvER,EAAMS,eAAiB,WAAQ,OAAOuF,EAAKnH,SAAS4B,eAAerL,EAAIsL,gBAAkB,EACzFV,EAAMW,sBAAwB,WAAQ,OAAOqF,EAAKnH,SAAS8B,sBAAsBvL,EAAIsL,gBAAkB,EAGvG+E,EAAaS,aAAalG,GAEnBA,CACX,GAAC,CAAA9Y,IAAA,oBAAAC,MAEO,SAAkBse,EAA4BpD,EAAoBC,GAAa,IAAA6D,EAAA,KAWnF,GAVKnf,KAAK6X,UACNrY,GAAOkC,WAAW,wDAAyDjC,EAAAA,GAAAA,OAAAA,sBAAqC,CAAE2K,UAAW,SAGjIqU,EAAaW,YAAY/D,EAAUC,GAGnCtb,KAAK0e,eAAeD,EAAatD,KAAOsD,GAGnCze,KAAK8e,cAAcL,EAAatD,KAAM,CACvC,IAAMkE,EAAc,SAACjR,GACjB,IAAI4K,EAAQmG,EAAKG,WAAWb,EAAcrQ,EAAKiN,GAG/C,GAAyB,MAArBrC,EAAMkD,YACN,IACI,IAAMzH,EAAOgK,EAAac,QAAQvG,GAClCmG,EAAKN,KAAI3R,MAATiS,EAAI,CAAMV,EAAalN,QAAMnQ,QAAAoe,EAAAA,EAAAA,GAAK/K,I,CACpC,MAAOpR,GACL2V,EAAMkD,YAAc7Y,EAAMA,K,CAKP,MAAvBob,EAAalN,QACb4N,EAAKN,KAAK,QAAS7F,GAIE,MAArBA,EAAMkD,aACNiD,EAAKN,KAAK,QAAS7F,EAAMkD,YAAalD,EAE9C,EACAhZ,KAAK8e,cAAcL,EAAatD,KAAOkE,EAGZ,MAAvBZ,EAAalN,QACbvR,KAAK6X,SAAS4H,GAAGhB,EAAalN,OAAQ8N,E,CAGlD,GAAC,CAAAnf,IAAA,cAAAC,MAED,SAAY6Y,EAA6B0G,EAA0CC,GAAkB,IAAAC,EAAA,KAC3FnB,EAAeze,KAAK6f,iBAAiB7G,GACrCzH,GAAS2F,EAAAA,EAAAA,IAAYuH,EAAalN,QAYxC,MAVqC,kBAA1BmO,IAAsCzN,EAAAA,EAAAA,IAAYyN,EAAsB,KAChE,MAAXC,GACAngB,GAAOa,mBAAmB,wCAAyC,UAAWsf,GAE9DpO,EAAQiI,UAAYkG,IAE9BnO,EAAQuO,UAAsC,MAAxBJ,EAAgCA,EAAsB,EAC5EnO,EAAQoO,QAAuB,MAAXA,EAAmBA,EAAS,UAGvD3f,KAAK6X,SAASkI,QAAQxO,GAAQ+F,MAAK,SAACyB,GACvC,OAAOA,EAAKtU,KAAI,SAAC2J,GAAG,OAAKwR,EAAKN,WAAWb,EAAcrQ,EAAK,KAAK,GACrE,GACJ,GAAC,CAAAlO,IAAA,KAAAC,MAED,SAAG6Y,EAA6BqC,GAE5B,OADArb,KAAKggB,kBAAkBhgB,KAAK6f,iBAAiB7G,GAAQqC,GAAU,GACxDrb,IACX,GAAC,CAAAE,IAAA,OAAAC,MAED,SAAK6Y,EAA6BqC,GAE9B,OADArb,KAAKggB,kBAAkBhgB,KAAK6f,iBAAiB7G,GAAQqC,GAAU,GACxDrb,IACX,GAAC,CAAAE,IAAA,OAAAC,MAED,SAAKwe,GACD,IAAK3e,KAAK6X,SAAY,OAAO,EAEyB,IAAtD,IAAM4G,EAAeze,KAAK6f,iBAAiBlB,GAAWsB,EAAA9S,UAAAlM,OAHjBwT,EAAgB,IAAAnQ,MAAA2b,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhBzL,EAAgByL,EAAA,GAAA/S,UAAA+S,GAIrD,IAAM1Z,EAAUiY,EAAa0B,IAAI1L,GAAQ,EAKzC,OAFAzU,KAAKif,oBAAoBR,GAElBjY,CACX,GAAC,CAAAtG,IAAA,gBAAAC,MAED,SAAcwe,GAAgC,IAAAyB,EAAA,KAC1C,OAAKpgB,KAAK6X,SACO,MAAb8G,EACO3Y,OAAOoM,KAAKpS,KAAK0e,gBAAgB7Y,QAAO,SAACC,EAAO5F,GACnD,OAAO4F,EAAQsa,EAAK1B,eAAexe,GAAKub,eAC5C,GAAG,GAEAzb,KAAK6f,iBAAiBlB,GAAWlD,gBANX,CAOjC,GAAC,CAAAvb,IAAA,YAAAC,MAED,SAAUwe,GACN,IAAK3e,KAAK6X,SAAY,MAAO,GAE7B,GAAiB,MAAb8G,EAAmB,CACnB,IAAMnY,EAA0B,GAChC,IAAK,IAAI2U,KAAOnb,KAAK0e,eACjB1e,KAAK0e,eAAevD,GAAKkF,YAAYvb,SAAQ,SAACuW,GAC1C7U,EAAOxF,KAAKqa,EAChB,IAEJ,OAAO7U,C,CAGX,OAAOxG,KAAK6f,iBAAiBlB,GAAW0B,WAC5C,GAAC,CAAAngB,IAAA,qBAAAC,MAED,SAAmBwe,GACf,IAAK3e,KAAK6X,SAAY,OAAO7X,KAE7B,GAAiB,MAAb2e,EAAmB,CACnB,IAAK,IAAMxD,KAAOnb,KAAK0e,eAAgB,CACnC,IAAMD,EAAeze,KAAK0e,eAAevD,GACzCsD,EAAa6B,qBACbtgB,KAAKif,oBAAoBR,E,CAE7B,OAAOze,I,CAIX,IAAMye,EAAeze,KAAK6f,iBAAiBlB,GAI3C,OAHAF,EAAa6B,qBACbtgB,KAAKif,oBAAoBR,GAElBze,IACX,GAAC,CAAAE,IAAA,MAAAC,MAED,SAAIwe,EAAiCtD,GACjC,IAAKrb,KAAK6X,SAAY,OAAO7X,KAC7B,IAAMye,EAAeze,KAAK6f,iBAAiBlB,GAG3C,OAFAF,EAAanF,eAAe+B,GAC5Brb,KAAKif,oBAAoBR,GAClBze,IACX,GAAC,CAAAE,IAAA,iBAAAC,MAED,SAAewe,EAAiCtD,GAC5C,OAAOrb,KAAK+e,IAAIJ,EAAWtD,EAC/B,IAAC,EAAAnb,IAAA,qBAAAC,MApUD,SAA0Boa,GACtB,OAAOgG,EAAAA,EAAAA,IAAmBhG,EAC9B,GAAC,CAAAra,IAAA,eAAAC,MAED,SAAoB6b,GAChB,OAAI5K,GAAUoP,YAAYxE,GACfA,EAEJ,IAAI5K,GAAU4K,EACzB,GAAC,CAAA9b,IAAA,YAAAC,MA+ED,SAAiBA,GACb,OAAOwQ,GAAQ8P,UAAUtgB,EAC7B,KAACwc,CAAA,CAjRoB,GA+fZ+D,GAAS,SAAAC,IAAA3d,EAAAA,EAAAA,GAAA0d,EAAAC,GAAA,IAAAvR,GAAAlM,EAAAA,EAAAA,GAAAwd,GAAA,SAAAA,IAAA,OAAA3gB,EAAAA,EAAAA,GAAA,KAAA2gB,GAAAtR,EAAAlC,MAAA,KAAAC,UAAA,QAAAlN,EAAAA,EAAAA,GAAAygB,EAAA,EAAQ/D,IAKjBiE,GAAe,WAMxB,SAAAA,EAAY5E,EAAsC6E,EAA0C1J,IAAepX,EAAAA,EAAAA,GAAA,KAAA6gB,GAEvG,IAAIE,EAAsB,KAeU,QAZhCA,EADqB,kBAAdD,EACOA,GACPE,EAAAA,EAAAA,IAAQF,IACD3e,EAAAA,EAAAA,IAAQ2e,GACfA,GAAwC,kBAArBA,EAASpX,OAEfoX,EAAUpX,OAGhB,KAIFjC,UAAU,EAAG,KAAesZ,EAAc,KAAOA,MAG5D7O,EAAAA,EAAAA,IAAY6O,IAAiBA,EAAY7f,OAAS,IACnDzB,GAAOa,mBAAmB,mBAAoB,WAAYwgB,GAI1D1J,IAAW2F,GAAAA,EAAAA,SAAgB3F,IAC3B3X,GAAOa,mBAAmB,iBAAkB,SAAU8W,IAG1D3W,EAAAA,EAAAA,IAAeR,KAAM,WAAY8gB,IACjCtgB,EAAAA,EAAAA,IAAeR,KAAM,aAAawR,EAAAA,EAAAA,IAAS,gBAAAoP,EAAA,KAAAnP,iBAAA,EAA4B,eAArCD,CAAqDwK,KACvFxb,EAAAA,EAAAA,IAAeR,KAAM,SAAUmX,GAAU,KAC7C,CAmHC,OAjHDlX,EAAAA,EAAAA,GAAA2gB,EAAA,EAAA1gB,IAAA,uBAAAC,MACA,WAGI,IAFA,IAAIqU,EAAyB,CAAC,EAE9BwM,EAAA7T,UAAAlM,OAHoBwT,EAAgB,IAAAnQ,MAAA0c,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhBxM,EAAgBwM,GAAA9T,UAAA8T,GAIpC,GAAIxM,EAAKxT,SAAWjB,KAAKiY,UAAUtG,OAAOtE,OAAOpM,OAAS,GAAuC,kBAA3BwT,EAAKA,EAAKxT,OAAS,GAErF,IAAK,IAAMf,KADXsU,GAAK0C,EAAAA,EAAAA,IAAYzC,EAAKZ,OAElB,IAAKoB,GAAuB/U,GACxB,MAAM,IAAI6F,MAAM,gCAAkC7F,IAM9D,CAAC,OAAQ,OAAQ,MAAM4E,SAAQ,SAAC5E,GACN,MAAZsU,EAAItU,IACdV,GAAOkC,WAAW,mBAAqBxB,EAAKT,EAAAA,GAAAA,OAAAA,sBAAqC,CAAE2K,UAAWlK,GAClG,IAEIsU,EAAGrU,SACWsB,EAAAA,GAAAA,KAAe+S,EAAGrU,OACrByG,UAAa5G,KAAKiY,UAAUtG,OAAO1D,SAC1CzO,GAAOkC,WAAW,gDAAiDjC,EAAAA,GAAAA,OAAAA,sBAAqC,CACpG2K,UAAW,kBACXjK,MAAOqU,EAAGrU,SActB,OARAX,GAAOkH,mBAAmB+N,EAAKxT,OAAQjB,KAAKiY,UAAUtG,OAAOtE,OAAOpM,OAAQ,4BAG5EuT,EAAGzT,MAAOmB,EAAAA,EAAAA,KAAQd,EAAAA,EAAAA,IAAO,CACrBpB,KAAK6gB,SACL7gB,KAAKiY,UAAUiJ,aAAazM,MAGzBD,CACX,GAAC,CAAAtU,IAAA,SAAAC,MAEK,WAA0B,QAAAghB,EAAAhU,UAAAlM,OAAhBwT,EAAgB,IAAAnQ,MAAA6c,GAAAC,EAAA,EAAAA,EAAAD,EAAAC,IAAhB3M,EAAgB2M,GAAAjU,UAAAiU,G,gJAab,OAXXnK,EAAiB,CAAC,EAGlBxC,EAAKxT,SAAWjB,KAAKiY,UAAUtG,OAAOtE,OAAOpM,OAAS,IACtDgW,EAAYxC,EAAKZ,OAIrBrU,GAAOkH,mBAAmB+N,EAAKxT,OAAQjB,KAAKiY,UAAUtG,OAAOtE,OAAOpM,OAAQ,4BAE5EogB,EAAAjL,KAAA,EACqBG,GAAiBvW,KAAKmX,OAAQ1C,EAAMzU,KAAKiY,UAAUtG,OAAOtE,QAAO,OAO3E,OAPL3D,EAAM2X,EAAArL,MACLhV,KAAKiW,GAGNqK,EAAathB,KAAKuhB,qBAAoBrU,MAAzBlN,MAAIwf,EAAAA,EAAAA,GAAyB9V,IAEhD2X,EAAAjL,KAAA,GACiBpW,KAAKmX,OAAO2D,gBAAgBwG,GAAW,QAQN,OAR5C9M,EAAE6M,EAAArL,KAEFlB,GAAUtD,EAAAA,EAAAA,IAA+CxR,KAAKyR,YAAa,qBAAjED,CAAuFgD,GAIvGkE,GAHM1B,GAAWxF,EAAAA,EAAAA,IAAgGxR,KAAKyR,YAAa,cAAlHD,CAAiIsD,EAAS9U,KAAKiY,UAAWjY,KAAKmX,QAGtJ3C,IAE1BhU,EAAAA,EAAAA,IAAewW,EAAU,oBAAqBxC,GAAI6M,EAAAnL,OAAA,SAC3Cc,GAAQ,yBAAAqK,EAAAhL,OAAA,GAAAmL,EAAA,S,GAClB,CAAAthB,IAAA,SAAAC,MAED,SAAO2U,GACH,OAAc9U,KAAKyR,YAAcgQ,YAAY3M,EAAS9U,KAAKiY,UAAWjY,KAAKmX,OAC/E,GAAC,CAAAjX,IAAA,UAAAC,MAED,SAAQgX,GACJ,OAAO,IAAgDnX,KAAKyR,YAAczR,KAAKiY,UAAWjY,KAAK6gB,SAAU1J,EAC7G,IAAC,EAAAjX,IAAA,eAAAC,MAED,SAAoBuhB,EAAqBvK,GACf,MAAlBuK,GACAliB,GAAOkC,WAAW,0BAA2BjC,EAAAA,GAAAA,OAAAA,iBAAgC,CAAEiF,SAAU,mBAG9D,kBAApBgd,IACPA,EAAiB7W,KAAKC,MAAM4W,IAGhC,IAAMpQ,EAAMoQ,EAAepQ,IAEvBuP,EAAgB,KAOpB,OANIa,EAAeb,SACfA,EAAWa,EAAeb,SACnBa,EAAeC,KAAOD,EAAeC,IAAId,WAChDA,EAAWa,EAAeC,IAAId,UAG3B,IAAI7gB,KAAKsR,EAAKuP,EAAU1J,EACnC,GAAC,CAAAjX,IAAA,eAAAC,MAED,SAAoB6b,GAChB,OAAO0E,GAASkB,aAAa5F,EACjC,GAAC,CAAA9b,IAAA,qBAAAC,MAED,SAA0BqU,GACtB,OAAO+L,EAAAA,EAAAA,IAAmB/L,EAC9B,GAAC,CAAAtU,IAAA,cAAAC,MAED,SAAmB2U,EAAiBkH,EAAsC7E,GACtE,OAAO,IAAIuJ,GAAS5L,EAASkH,EAAmB7E,EACpD,KAACyJ,CAAA,CAzJuB,E","sources":["../node_modules/@ethersproject/abi/src.ts/_version.ts","../node_modules/@ethersproject/abi/src.ts/coders/abstract-coder.ts","../node_modules/@ethersproject/abi/src.ts/coders/address.ts","../node_modules/@ethersproject/abi/src.ts/coders/anonymous.ts","../node_modules/@ethersproject/abi/src.ts/coders/array.ts","../node_modules/@ethersproject/abi/src.ts/coders/boolean.ts","../node_modules/@ethersproject/abi/src.ts/coders/bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/fixed-bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/null.ts","../node_modules/@ethersproject/abi/src.ts/coders/number.ts","../node_modules/@ethersproject/abi/src.ts/coders/string.ts","../node_modules/@ethersproject/abi/src.ts/coders/tuple.ts","../node_modules/@ethersproject/abi/src.ts/fragments.ts","../node_modules/@ethersproject/abi/src.ts/abi-coder.ts","../node_modules/@ethersproject/abi/src.ts/interface.ts","../node_modules/@ethersproject/contracts/src.ts/index.ts","../node_modules/@ethersproject/contracts/src.ts/_version.ts"],"sourcesContent":["export const version = \"abi/5.7.0\";\n","\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nexport interface Result extends ReadonlyArray<any> {\n    readonly [key: string]: any;\n}\n\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n\n    _throwError(message: string, value: any): void {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\nexport class Writer {\n    readonly wordSize: number;\n\n    _data: Array<Uint8Array>;\n    _dataLength: number;\n    _padding: Uint8Array;\n\n    constructor(wordSize?: number) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [ ];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n\n    get data(): string {\n        return hexConcat(this._data);\n    }\n    get length(): number { return this._dataLength; }\n\n    _writeData(data: Uint8Array): number {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this._writeData(concat(writer._data));\n    }\n\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([ bytes, this._padding.slice(paddingOffset) ])\n        }\n        return this._writeData(bytes);\n    }\n\n    _getValue(value: BigNumberish): Uint8Array {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([ this._padding.slice(bytes.length % this.wordSize), bytes ]);\n        }\n        return bytes;\n    }\n\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value: BigNumberish): number {\n        return this._writeData(this._getValue(value));\n    }\n\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value: BigNumberish) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\n\nexport class Reader {\n    readonly wordSize: number;\n    readonly allowLoose: boolean;\n\n    readonly _data: Uint8Array;\n    readonly _coerceFunc: CoerceFunc;\n\n    _offset: number;\n\n    constructor(data: BytesLike, wordSize?: number, coerceFunc?: CoerceFunc, allowLoose?: boolean) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n\n        this._offset = 0;\n    }\n\n    get data(): string { return hexlify(this._data); }\n    get consumed(): number { return this._offset; }\n\n    // The default Coerce function\n    static coerce(name: string, value: any): any {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) { value =  value.toNumber(); }\n        return value;\n    }\n\n    coerce(name: string, value: any): any {\n        if (this._coerceFunc) { return this._coerceFunc(name, value); }\n        return Reader.coerce(name, value);\n    }\n\n    _peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            } else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength)\n    }\n\n    subReader(offset: number): Reader {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    readValue(): BigNumber {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class AddressCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"address\", \"address\", localName, false);\n    }\n\n    defaultValue(): string {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n\n    encode(writer: Writer, value: string): number {\n        try {\n            value = getAddress(value)\n        } catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    private coder: Coder;\n\n    constructor(coder: Coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n\n    defaultValue(): any {\n        return this.coder.defaultValue();\n    }\n\n    encode(writer: Writer, value: any): number {\n        return this.coder.encode(writer, value);\n    }\n\n    decode(reader: Reader): any {\n        return this.coder.decode(reader);\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\n\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = null;\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\nexport function unpack(reader: Reader, coders: Array<Coder>): Result {\n    let values: any = [];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) { accum[name] = 0; }\n            accum[name]++;\n        }\n        return accum;\n    }, <{ [ name: string ]: number }>{ });\n\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder: Coder, index: number) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) { return; }\n\n        if (name === \"length\") { name = \"_length\"; }\n\n        if (values[name] != null) { return; }\n\n        const value = values[index];\n\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        } else {\n            values[name] = value;\n        }\n    });\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n\n    return Object.freeze(values);\n}\n\n\nexport class ArrayCoder extends Coder {\n    readonly coder: Coder;\n    readonly length: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n\n        this.coder = coder;\n        this.length = length;\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, value: Array<any>): number {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders = [];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class BooleanCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n\n    defaultValue(): boolean {\n        return false;\n    }\n\n    encode(writer: Writer, value: boolean): number {\n        return writer.writeValue(value ? 1: 0);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n\n","\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class DynamicBytesCoder extends Coder {\n    constructor(type: string, localName: string) {\n       super(type, type, localName, true);\n    }\n\n    defaultValue(): string {\n        return \"0x\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n\n    decode(reader: Reader): any {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\n\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName: string) {\n        super(\"bytes\", localName);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n\n\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    readonly size: number;\n\n    constructor(size: number, localName: string) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n\n    defaultValue(): string {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n\n    encode(writer: Writer, value: BytesLike): number {\n        let data = arrayify(value);\n        if (data.length !== this.size) { this._throwError(\"incorrect data length\", value); }\n        return writer.writeBytes(data);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NullCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"null\", \"\", localName, false);\n    }\n\n    defaultValue(): null {\n        return null;\n    }\n\n    encode(writer: Writer, value: any): number {\n        if (value != null) { this._throwError(\"not null\", value); }\n        return writer.writeBytes([ ]);\n    }\n\n    decode(reader: Reader): any {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NumberCoder extends Coder {\n    readonly size: number;\n    readonly signed: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        this.size = size;\n        this.signed = signed;\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, value: BigNumberish): number {\n        let v = BigNumber.from(value);\n\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n\n        return writer.writeValue(v);\n    }\n\n    decode(reader: Reader): any {\n        let value = reader.readValue().mask(this.size * 8);\n\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n\n        return reader.coerce(this.name, value);\n    }\n}\n\n","\"use strict\";\n\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Reader, Writer } from \"./abstract-coder\";\nimport { DynamicBytesCoder } from \"./bytes\";\n\nexport class StringCoder extends DynamicBytesCoder {\n\n    constructor(localName: string) {\n        super(\"string\", localName);\n    }\n\n    defaultValue(): string {\n        return \"\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n\n    decode(reader: Reader): any {\n        return toUtf8String(super.decode(reader));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\n\nexport class TupleCoder extends Coder {\n    readonly coders: Array<Coder>;\n\n    constructor(coders: Array<Coder>, localName: string) {\n        let dynamic = false;\n        const types: Array<string> = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) { dynamic = true; }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n\n    defaultValue(): any {\n        const values: any = [ ];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) { accum[name] = 0; }\n                accum[name]++;\n            }\n            return accum;\n        }, <{ [ name: string ]: number }>{ });\n\n        // Add named values\n        this.coders.forEach((coder: Coder, index: number) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) { return; }\n\n            if (name === \"length\") { name = \"_length\"; }\n\n            if (values[name] != null) { return; }\n\n            values[name] = values[index];\n        });\n\n        return Object.freeze(values);\n    }\n\n    encode(writer: Writer, value: Array<any> | { [ name: string ]: any }): number {\n        return pack(writer, this.coders, value);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport interface JsonFragmentType {\n    readonly name?: string;\n    readonly indexed?: boolean;\n    readonly type?: string;\n    readonly internalType?: any; // @TODO: in v6 reduce type\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\nexport interface JsonFragment {\n    readonly name?: string;\n    readonly type?: string;\n\n    readonly anonymous?: boolean;\n\n    readonly payable?: boolean;\n    readonly constant?: boolean;\n    readonly stateMutability?: string;\n\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    readonly gas?: string;\n};\n\nconst _constructorGuard = { };\n\n// AST Node parser state\ntype ParseState = {\n    allowArray?: boolean,\n    allowName?: boolean,\n    allowParams?: boolean,\n    allowType?: boolean,\n    readArray?: boolean,\n};\n\n// AST Node\ntype ParseNode = {\n    parent?: any,\n    type?: string,\n    name?: string,\n    state?: ParseState,\n    indexed?: boolean,\n    components?: Array<ParseNode>\n};\n\nlet ModifiersBytes: { [ name: string ]: boolean } = { calldata: true, memory: true, storage: true };\nlet ModifiersNest: { [ name: string ]: boolean } = { calldata: true, memory: true };\nfunction checkModifier(type: string, name: string): boolean {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) { return true; }\n    } else if (type === \"address\") {\n        if (name === \"payable\") { return true; }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) { return true; }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param: string, allowIndexed: boolean): ParseNode {\n\n    let originalParam = param;\n    function throwError(i: number) {\n        logger.throwArgumentError(`unexpected character at position ${ i }`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n\n    function newNode(parent: ParseNode): ParseNode {\n        let node: ParseNode = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) { node.indexed = false; }\n        return node\n    }\n\n    let parent: ParseNode = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [ newNode(node) ];\n                node = node.components[0];\n                break;\n\n            case \")\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let child = node;\n                node = node.parent;\n                if (!node) { throwError(i); }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n\n            case \",\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let sibling: ParseNode = newNode(node.parent);\n                 //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n\n            // Hit a space...\n            case \" \":\n\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) { throwError(i); }\n                            if (node.indexed) { throwError(i); }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n\n                break;\n\n            case \"[\":\n                if (!node.state.allowArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n\n            case \"]\":\n                if (!node.state.readArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n               }\n        }\n    }\n\n    if (node.parent) { logger.throwArgumentError(\"unexpected eof\", \"param\", param); }\n\n    delete parent.state;\n\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) { throwError(originalParam.length - 7); }\n        if (node.indexed) { throwError(originalParam.length - 7); }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n\n    parent.type = verifyType(parent.type);\n\n    return parent;\n}\n\nfunction populate(object: any, params: any) {\n    for (let key in params) { defineReadOnly(object, key, params[key]); }\n}\n\nexport const FormatTypes: { [ name: string ]: string } = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n\n    // JSON-format a la Solidity\n    json: \"json\"\n});\n\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nexport class ParamType {\n\n    // The local name of the parameter (of null if unbound)\n    readonly name: string;\n\n    // The fully qualified type (e.g. \"address\", \"tuple(address)\", \"uint256[3][]\"\n    readonly type: string;\n\n    // The base type (e.g. \"address\", \"tuple\", \"array\")\n    readonly baseType: string;\n\n    // Indexable Paramters ONLY (otherwise null)\n    readonly indexed: boolean;\n\n    // Tuples ONLY: (otherwise null)\n    //  - sub-components\n    readonly components: Array<ParamType>;\n\n    // Arrays ONLY: (otherwise null)\n    //  - length of the array (-1 for dynamic length)\n    //  - child type\n    readonly arrayLength: number;\n    readonly arrayChildren: ParamType;\n\n    readonly _isParamType: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) { logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n        }); }\n        populate(this, params);\n\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\": this.type)\n            });\n        }\n\n        this._isParamType = true;\n\n        Object.freeze(this);\n    }\n\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            let result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\": String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === FormatTypes.full) ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    static from(value: string | JsonFragmentType | ParamType, allowIndexed?: boolean): ParamType {\n        if (typeof(value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragmentType | ParamType): ParamType {\n        if (ParamType.isParamType(value)) { return value; }\n\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null: !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject): null)\n        });\n    }\n\n    static fromString(value: string, allowIndexed?: boolean): ParamType {\n        function ParamTypify(node: ParseNode): ParamType {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n\n    static isParamType(value: any): value is ParamType {\n        return !!(value != null && value._isParamType);\n    }\n};\n\nfunction parseParams(value: string, allowIndex: boolean): Array<ParamType> {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\n\ntype TypeCheck<T> = { -readonly [ K in keyof T ]: T[K] };\n\ninterface _Fragment {\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: ReadonlyArray<ParamType>;\n}\n\nexport abstract class Fragment {\n\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: Array<ParamType>;\n\n    readonly _isFragment: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n\n        this._isFragment = true;\n\n        Object.freeze(this);\n    }\n\n    abstract format(format?: string): string;\n\n    static from(value: Fragment | JsonFragment | string): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        if (typeof(value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n    }\n\n    static fromObject(value: Fragment | JsonFragment): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n\n    static fromString(value: string): Fragment {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n           return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n           return ErrorFragment.fromString(value.substring(5).trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n\n    static isFragment(value: any): value is Fragment {\n        return !!(value && value._isFragment);\n    }\n}\n\ninterface _EventFragment extends _Fragment {\n    readonly anonymous: boolean;\n}\n\nexport class EventFragment extends Fragment {\n    readonly anonymous: boolean;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: EventFragment | JsonFragment | string): EventFragment {\n        if (typeof(value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragment | EventFragment): EventFragment {\n        if (EventFragment.isEventFragment(value)) { return value; }\n\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_EventFragment> = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n\n        return new EventFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): EventFragment {\n\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch(modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n\n    static isEventFragment(value: any): value is EventFragment {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\n\nfunction parseGas(value: string, params: any): string {\n    params.gas = null;\n\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n\n    return value;\n}\n\nfunction parseModifiers(value: string, params: any): void {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\n\ntype StateInputValue = {\n    constant?: boolean;\n    payable?: boolean;\n    stateMutability?: string;\n    type?: string;\n};\n\ntype StateOutputValue = {\n    constant: boolean;\n    payable: boolean;\n    stateMutability: string;\n};\n\nfunction verifyState(value: StateInputValue): StateOutputValue {\n    let result: any = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = (result.payable ? \"payable\": \"nonpayable\");\n        }\n\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\": \"payable\");\n\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    return result;\n}\n\ninterface _ConstructorFragment extends _Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n}\n\nexport class ConstructorFragment extends Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n\n        let result = \"constructor(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n    }\n\n    static from(value: ConstructorFragment | JsonFragment | string): ConstructorFragment {\n        if (typeof(value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ConstructorFragment | JsonFragment): ConstructorFragment {\n        if (ConstructorFragment.isConstructorFragment(value)) { return value; }\n\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        const params: TypeCheck<_ConstructorFragment> = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): ConstructorFragment {\n        let params: any = { type: \"constructor\" };\n\n        value = parseGas(value, params);\n\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        return ConstructorFragment.fromObject(params);\n    }\n\n    static isConstructorFragment(value: any): value is ConstructorFragment {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\n\ninterface _FunctionFragment extends _ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n}\n\nexport class FunctionFragment extends ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(\n                    (output) => output.format(format)\n                ).join(\", \") + \") \";\n            }\n\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: FunctionFragment | JsonFragment | string): FunctionFragment {\n        if (typeof(value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n\n    static fromObject(value: FunctionFragment | JsonFragment): FunctionFragment {\n        if (FunctionFragment.isFunctionFragment(value)) { return value; }\n\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n\n        const params: TypeCheck<_FunctionFragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject): [ ]),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new FunctionFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): FunctionFragment {\n        let params: any = { type: \"function\" };\n        value = parseGas(value, params);\n\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        // We have outputs\n        if (comps.length > 1) {\n           let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [ ];\n        }\n\n        return FunctionFragment.fromObject(params);\n    }\n\n    static isFunctionFragment(value: any): value is FunctionFragment {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n\n//export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment: ErrorFragment): ErrorFragment {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${ sig } error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        return result.trim();\n    }\n\n    static from(value: ErrorFragment | JsonFragment | string): ErrorFragment {\n        if (typeof(value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ErrorFragment | JsonFragment): ErrorFragment {\n        if (ErrorFragment.isErrorFragment(value)) { return value; }\n\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_Fragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): [])\n        };\n\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n\n    static fromString(value: string): ErrorFragment {\n        let params: any = { type: \"error\" };\n\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n\n    static isErrorFragment(value: any): value is ErrorFragment {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\n\nfunction verifyType(type: string): string {\n\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n\n    // @TODO: more verification\n\n    return type;\n}\n\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value: string): string {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${ value }\"`, \"value\", value);\n    }\n    return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value: string): Array<any> {\n    value = value.trim();\n\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) { result.push(accum); }\n\n    return result;\n}\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment | string, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = (<EventFragment>eventFragment).inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n","\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n    ccipReadEnabled?: boolean;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true,\n    ccipReadEnabled: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    if (ro.ccipReadEnabled) {\n        tx.ccipReadEnabled = !!ro.ccipReadEnabled;\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n    delete overrides.ccipReadEnabled;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        // Swallow bad ENS names to prevent Unhandled Exceptions\n        this.resolvedAddress.catch((e) => { });\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter | string, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n","export const version = \"contracts/5.7.0\";\n"],"names":["version","logger","Logger","Coder","name","type","localName","dynamic","_classCallCheck","this","_createClass","key","value","message","throwArgumentError","Writer","wordSize","defineReadOnly","_data","_dataLength","_padding","Uint8Array","get","hexConcat","data","push","length","writer","_writeData","concat","bytes","arrayify","paddingOffset","slice","BigNumber","throwError","offset","_getValue","_this","Reader","coerceFunc","allowLoose","_offset","hexlify","_coerceFunc","coerce","loose","alignedLength","Math","ceil","_peekBytes","readBytes","match","parseInt","toNumber","AddressCoder","_Coder","_inherits","_super","_createSuper","call","getAddress","error","_throwError","writeValue","reader","hexZeroPad","readValue","toHexString","AnonymousCoder","coder","undefined","defaultValue","encode","decode","pack","coders","values","arrayValues","Array","isArray","unique","map","argument","staticWriter","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","writeUpdatableValue","baseOffset","func","appendWriter","unpack","baseReader","subReader","offsetReader","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","_loop","i","freeze","ArrayCoder","defaultChild","result","count","checkArgumentCount","BooleanCoder","isZero","DynamicBytesCoder","writeBytes","BytesCoder","_DynamicBytesCoder","_super2","_get","_getPrototypeOf","prototype","FixedBytesCoder","size","String","substring","NullCoder","NumberCoder","signed","v","maxUintValue","MaxUint256","bounds","mask","gt","lt","add","One","mul","NegativeOne","Zero","toTwos","fromTwos","StringCoder","toUtf8Bytes","toUtf8String","TupleCoder","types","join","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","populate","object","params","FormatTypes","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","operation","arrayLength","arrayChildren","fromObject","components","_isParamType","format","indexed","comp","JSON","parse","stringify","allowIndexed","fromString","isParamType","verifyType","node","param","originalParam","newNode","parent","state","allowType","replace","c","allowParams","child","allowName","allowArray","sibling","readArray","parseParamType","parseParams","allowIndex","trim","depth","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","split","_Fragment","apply","arguments","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","_Fragment2","isConstructorFragment","parens","_ConstructorFragment","_super3","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","_Fragment3","_super4","isErrorFragment","regexIdentifier","paramTypeBytes","paramTypeNumber","defaultAbiCoder","AbiCoder","_getCoder","component","_getWordSize","_this2","from","_this3","_getWriter","_this4","_getReader","LogDescription","_Description","Description","TransactionDescription","_Description2","ErrorDescription","_Description3","Indexed","_Description4","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","filter","getStatic","constructor","bucket","deploy","functions","events","errors","j","nameOrSignatureOrSighash","isHexString","getSighash","matching","keys","f","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","getFunction","getError","_","eventFragment","getEvent","_abiCoder","_encodeParams","_decodeParams","functionFragment","errorArgs","errorName","errorSignature","selector","builtin","method","topics","encodeTopic","id","keccak256","pop","dataTypes","dataValues","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","tx","args","topic","decodeEventLog","hexData","errorFragment","address","hexDataSlice","_isInterface","allowedTransactionKeys","chainId","gasLimit","gasPrice","nonce","to","accessList","maxFeePerGas","maxPriorityFeePerGas","customData","ccipReadEnabled","resolveName","resolver","nameOrPromise","_context","sent","prev","abrupt","t0","next","stop","_callee","resolveAddresses","paramType","_context2","Promise","all","reject","makeError","_callee2","populateTransaction","contract","overrides","shallowCopy","signer","resolveProperties","override","then","check","__awaiter","_regeneratorRuntime","mark","_callee3","_context3","provider","_context4","resolvedAddress","resolved","interface","encodeFunctionData","ro","accessListify","intrinsic","roValue","leftovers","l","_callee4","addContractWait","wait","bind","confirmations","receipt","logs","event","deepCopy","parsed","parseLog","e","eventSignature","removeListener","getBlock","blockHash","getTransaction","transactionHash","getTransactionReceipt","resolve","buildCall","collapseSimple","signerOrProvider","_len3","_key3","blockTag","_context6","deployTransaction","_deployed","decodeFunctionResult","transaction","_callee6","buildDefault","_len4","_key4","_context7","txRequest","sendTransaction","_callee7","buildSend","getEventTag","RunningEvent","tag","_listeners","listener","once","done","item","listenerCount","argsCopy","setTimeout","ErrorRunningEvent","_RunningEvent","FragmentRunningEvent","_RunningEvent2","contractInterface","_assertThisInitialized","decodeError","checkErrors","path","childPath","checkResultErrors","WildcardRunningEvent","_RunningEvent3","_this5","_this6","BaseContract","addressOrName","_this7","Signer","Provider","uniqueFilters","filters","_len5","_key5","encodeFilterTopics","catch","uniqueSignatures","callStatic","_len","_key","buildPopulate","estimateGas","_len2","_key2","_context5","_callee5","buildEstimate","signatures","_this8","_deployedPromise","getCode","contractAddress","_this9","deployed","VoidSigner","runningEvent","_runningEvents","eventName","_normalizeRunningEvent","emit","_wrappedEmits","off","_this10","_checkRunningEvents","prepareEvent","_this11","addListener","wrappedEmit","_wrapEvent","getEmit","_toConsumableArray","on","fromBlockOrBlockhash","toBlock","_this12","_getRunningEvent","fromBlock","getLogs","_addEventListener","_len6","_key6","run","_this13","listeners","removeAllListeners","getContractAddress","isInterface","isIndexed","Contract","_BaseContract","ContractFactory","bytecode","bytecodeHex","isBytes","_len7","_key7","encodeDeploy","_len8","_key8","_context8","unsignedTx","getDeployTransaction","_callee8","getContract","compilerOutput","evm","getInterface"],"sourceRoot":""}