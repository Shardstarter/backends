{"version":3,"file":"static/js/9962.25cb2437.chunk.js","mappings":"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","sources":["utils/contract.js","hooks/useContract.js"],"sourcesContent":["import { Contract } from \"@ethersproject/contracts\";\r\nimport { getAddress } from \"@ethersproject/address\";\r\nimport { AddressZero } from \"@ethersproject/constants\";\r\nimport { BigNumber } from \"@ethersproject/bignumber\";\r\n\r\n// returns the checksummed address if the address is valid, otherwise returns false\r\nexport function isAddress(value) {\r\n  try {\r\n    return getAddress(value);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// add 10%\r\nexport function calculateGasMargin(value) {\r\n  return value\r\n    .mul(BigNumber.from(10000).add(BigNumber.from(1000)))\r\n    .div(BigNumber.from(10000));\r\n}\r\n\r\n// account is not optional\r\nexport function getSigner(library, account) {\r\n  return library.getSigner(account).connectUnchecked();\r\n}\r\n\r\n// account is optional\r\nexport function getProviderOrSigner(library, account = \"\") {\r\n  try {\r\n    return account ? getSigner(library, account) : library;\r\n  } catch (error) {\r\n    console.log(\"getProviderOrSigner\" , error)\r\n  }\r\n \r\n}\r\n\r\n// account is optional\r\nexport function getContract(address, ABI, library, account = \"\") {\r\n  if (!isAddress(address) || address === AddressZero) {\r\n    throw Error(`Invalid 'address' parameter '${address}'.`);\r\n  }\r\n  \r\n  try {\r\n    return new Contract(address, ABI, getProviderOrSigner(library, account));\r\n  } catch (error) {\r\n    console.log(\"OUT try\" , error)\r\n  }\r\n  \r\n}\r\n\r\nexport function escapeRegExp(string) {\r\n  return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\r\n}\r\n","import { useMemo } from 'react';\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\r\nimport ERC20_ABI from 'config/abi/erc20.json';\r\nimport IDO_ABI from 'config/abi/ido.json';\r\nimport LOCK_ABI from 'config/abi/lock.json';\r\nimport POOL_ABI from 'config/abi/pool.json';\r\nimport STAKING_ABI from 'config/abi/staking.json';\r\nimport LIQUIDSTAKING_ABI from 'config/abi/liquid_staking.json';\r\n\r\nimport {\r\n  IDO_ADDRESS, LOCK_ADDRESS, MAIN_STAKING_CONTRACT_ADDRESS,\r\n  PROJECT_MAIN_TOKEN_ADDRESS, LIQUID_STAKING_CONTRACT_ADDRESS, LIQUID_STAKING_TOKEN_ADDRESS\r\n} from 'config/constants';\r\n// Imports below migrated from Exchange useContract.ts\r\nimport { Contract } from '@ethersproject/contracts';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport { getContract } from 'utils/contract';\r\n\r\nfunction useContract(address, ABI, withSignerIfPossible = true) {\r\n  const { library, account } = useActiveWeb3React();\r\n  // console.log(\"useContract\",library)\r\n  // console.log(\"useContract\",account)\r\n  return useMemo(() => {\r\n    if (!address || !ABI || !library) return null;\r\n    try {\r\n      // console.log(\"inTRY\")\r\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined);\r\n    } catch (error) {\r\n      console.error('Failed to get contract', error);\r\n      return null;\r\n    }\r\n  }, [address, ABI, library, withSignerIfPossible, account]);\r\n}\r\n\r\nexport function useTokenContract(tokenAddress, withSignerIfPossible = true) {\r\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible);\r\n}\r\nexport function useProjectMainTokenContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n  return useContract(PROJECT_MAIN_TOKEN_ADDRESS[network], ERC20_ABI, withSignerIfPossible);\r\n}\r\nexport function useLiquidStakingTokenContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n  return useContract(LIQUID_STAKING_TOKEN_ADDRESS[network], ERC20_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function usePoolContract(poolAddress, withSignerIfPossible = true) {\r\n  return useContract(poolAddress, POOL_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useIDOContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n  return useContract(IDO_ADDRESS[network], IDO_ABI, withSignerIfPossible);\r\n}\r\nexport function useLockContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n  return useContract(LOCK_ADDRESS[network], LOCK_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useStakingContract(contractAddress, withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n\r\n  return useContract(contractAddress, STAKING_ABI, withSignerIfPossible);\r\n}\r\n\r\n// Main staking contract that determines IDO tier system\r\nexport function useMainStakingContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n\r\n  return useContract(MAIN_STAKING_CONTRACT_ADDRESS[network], STAKING_ABI, withSignerIfPossible);\r\n}\r\n\r\nexport function useLiquidStakingContract(withSignerIfPossible = true) {\r\n  const network = useSelector((state) => state.network.chainId);\r\n\r\n  return useContract(LIQUID_STAKING_CONTRACT_ADDRESS[network], LIQUIDSTAKING_ABI, withSignerIfPossible);\r\n}\r\n\r\n\r\n"],"names":["getContract","address","ABI","library","account","arguments","length","undefined","value","getAddress","_unused","isAddress","AddressZero","Error","concat","Contract","getSigner","connectUnchecked","error","console","log","getProviderOrSigner","useContract","withSignerIfPossible","_useActiveWeb3React","useActiveWeb3React","useMemo","useTokenContract","tokenAddress","ERC20_ABI","useProjectMainTokenContract","network","useSelector","state","chainId","PROJECT_MAIN_TOKEN_ADDRESS","useLiquidStakingTokenContract","LIQUID_STAKING_TOKEN_ADDRESS","usePoolContract","poolAddress","POOL_ABI","useIDOContract","IDO_ADDRESS","IDO_ABI","useLockContract","LOCK_ADDRESS","LOCK_ABI","useStakingContract","contractAddress","STAKING_ABI","useMainStakingContract","MAIN_STAKING_CONTRACT_ADDRESS","useLiquidStakingContract","LIQUID_STAKING_CONTRACT_ADDRESS","LIQUIDSTAKING_ABI"],"sourceRoot":""}