{"version":3,"file":"static/js/4117.32863d64.chunk.js","mappings":"mWA0Be,SAASA,IACtB,IAAQC,GAASC,EAAAA,EAAAA,MAATD,KACFE,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,KAAZD,QAGRE,GAAsBC,EAAAA,EAAAA,UAAS,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1BI,EAAGF,EAAA,GAAEG,EAAMH,EAAA,GAClBI,GAAkCL,EAAAA,EAAAA,WAAS,GAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA9BE,GAAFD,EAAA,GAAcA,EAAA,IAExBE,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMF,QAAQG,OAAO,IACtDC,GAASC,EAAAA,EAAAA,QAAO,OACtBC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAKH,EAAOI,QAClBC,EAAAA,GAAAA,OAAYF,EAAI,CAACG,QAAS,GAAI,CAACA,QAAS,EAAGC,SAAU,EAAGC,cAAc,CACpEC,QAAUN,EACVO,MAAO,aAEPC,cAAe,+BAEnB,KAGAT,EAAAA,EAAAA,YAAU,WACR,IAAIU,GAAY,EAOhB,OANAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACoB,OAAnBzB,GAAa,GAAMuB,EAAAE,KAAA,EACbrC,GAASsC,EAAAA,EAAAA,IAASzB,EAASL,EAAKN,IAAU,KAAD,EAC1C2B,GACHjB,GAAa,GAAO,wBAAAuB,EAAAI,OAAA,GAAAN,EAAA,IAJxBH,GAMO,kBAAMD,GAAY,CAAK,CAChC,GAAG,CAAC3B,EAASF,EAAUa,EAASL,KAEhCW,EAAAA,EAAAA,YAAU,WACR,OAAQrB,GACN,IAAK,oBACHW,EAAO,GACP,MACF,IAAK,aACHA,EAAO,GACP,MACF,IAAK,eACHA,EAAO,GACP,MACF,QACEA,EAAO,GAEb,GAAG,CAACX,IASJ,IAAM0C,EAAiB,CACrB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAGFC,GAAwCpC,EAAAA,EAAAA,YAAUqC,GAAAnC,EAAAA,EAAAA,GAAAkC,EAAA,GAA3CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCG,GAAwCxC,EAAAA,EAAAA,UAAS,uBAAsByC,GAAAvC,EAAAA,EAAAA,GAAAsC,EAAA,GAAlDE,GAAFD,EAAA,GAAiBA,EAAA,IA2DpC,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAAGC,MAAO,CAACC,gBAAgB,WAAYC,YAAY,MAAMC,aAAa,MAAKN,SAAA,EAC9EF,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACC,eAAe,SAASC,QAAQ,OAAOC,aAAa,OAAMV,UAC3DF,EAAAA,EAAAA,KAACa,EAAAA,EAAQ,CACTC,aAvDkB,SAACC,GACzB,IAAMC,EAAaxB,EAAeuB,EAAME,YACxClB,EAAgB,GAADmB,OAAIF,EAAU,uBAC/B,EAqDQG,YA5DiB,SAACJ,GACxB,IAAMK,EAAYL,EAAMM,cACxBtB,EAAgB,GAADmB,OAAIE,EAAS,sBAC9B,EA0DQE,SAjEiB,SAACP,GACxBnB,EAAgBmB,GAChBhB,EAAgB,wBAADmB,OAAyBH,EAAMQ,gBAChD,EA+DQR,MAAOpB,OAGXK,EAAAA,EAAAA,KAACwB,EAAK,CAACC,OArCI,CACb,CACEC,IAAM,EACNC,MAAQ,cACRC,OAAS,qBACTC,QAAU,OAEZ,CACEH,IAAM,GACNC,MAAQ,cACRC,OAAS,qBACTC,QAAU,OAEZ,CACEH,IAAM,GACNC,MAAQ,cACRC,OAAS,qBACTC,QAAU,OAEZ,CACEH,IAAM,GACNC,MAAQ,cACRC,OAAS,qBACTC,QAAU,cAkBhB,CACA,SAASL,EAAMM,GACb,OACE9B,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAF,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACsB,UAAU,OAAM7B,SACpB4B,EAAML,OAAOO,KAAI,SAACC,GAAK,OACtBjC,EAAAA,EAAAA,KAACkC,EAAS,CAACD,MAAOA,GAAQ,OAKhC,CACA,SAASC,EAAUJ,GACjB,IAAMG,EAAQH,EAAMG,MACpB,OACEjC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACAF,EAAAA,EAAAA,KAACS,EAAAA,EAAG,CAACE,QAAQ,OAAOD,eAAe,SAASyB,QAAQ,SAAQjC,UAC1DC,EAAAA,EAAAA,MAACiC,EAAAA,GAAI,CAACC,WAAS,EAACzB,aAAa,OAAON,gBAAgB,UAAUgC,aAAc,EAAGH,QAAQ,YAAWjC,SAAA,EAChGF,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,EAAGC,SAAU,GAAIC,MAAM,QAAOxC,SAAE+B,EAAMP,OACrD1B,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,SAAU,GAAIC,MAAM,QAAOxC,SAAE+B,EAAMN,SACtD3B,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,EAAGC,SAAU,GAAIC,MAAM,UAASxC,SAAE+B,EAAMJ,WACvD7B,EAAAA,EAAAA,KAACoC,EAAAA,GAAI,CAACG,MAAI,EAACC,GAAI,GAAIC,SAAU,GAAIC,MAAM,UAASxC,SAAE+B,EAAML,eAKhE,C","sources":["pages/PhoneCalendar.js"],"sourcesContent":["import \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport React from 'react'\r\nimport Page from 'components/Page';\r\nimport { getPools } from 'redux/slices/pools';\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\nimport gsap from 'gsap';\r\nimport Loader from 'react-loader-spinner';\r\n// import { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport {Calendar} from 'react-calendar'\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport {Box, Grid} from '@mui/material'\r\n\r\nimport { Eventcalendar, getJson, setOptions, CalendarNav, \r\n    SegmentedGroup, SegmentedItem, CalendarPrev, CalendarNext } from '@mobiscroll/react-lite';\r\n\r\n// setOptions({\r\n//     theme: 'ios',\r\n//     themeVariant: 'light'\r\n// });\r\n\r\n// moment.locale(\"en-GB\");\r\n// const localizer = momentLocalizer(moment);\r\n\r\nexport default function PhoneCalendar() {\r\n  const { hash } = useLocation();\r\n  const dispatch = useDispatch();\r\n  const { account } = useActiveWeb3React();\r\n\r\n  //Pagination part\r\n  const [tab, setTab] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  const network = useSelector((state) => state.network.chainId);\r\n  const imgRef = useRef(null);\r\n  useEffect(() => {\r\n    const el = imgRef.current;\r\n    gsap.fromTo(el, {opacity: 0}, {opacity: 1, duration: 2, scrollTrigger:{\r\n      trigger : el,\r\n      start: \"top bottom\",\r\n      // end: \"top bottom\",\r\n      toggleActions: \"restart pause restart none\"\r\n    }})\r\n  })\r\n\r\n  //--------------------\r\n  useEffect(() => {\r\n    let unmounted = false;\r\n    (async () => {\r\n      setIsLoading(true);\r\n      await dispatch(getPools(network, tab, account));\r\n      if (!unmounted)\r\n        setIsLoading(false);\r\n    })();\r\n    return () => unmounted = true;\r\n  }, [account, dispatch, network, tab]);\r\n\r\n  useEffect(() => {\r\n    switch (hash) {\r\n      case '#my-contributions':\r\n        setTab(1);\r\n        break;\r\n      case '#my-alarms':\r\n        setTab(2);\r\n        break;\r\n      case '#my-presales':\r\n        setTab(3);\r\n        break;\r\n      default:\r\n        setTab(0);\r\n    }\r\n  }, [hash]);\r\n  // const Item = styled(Paper)(({ theme }) => ({\r\n  //   backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\r\n  //   ...theme.typography.body2,\r\n  //   padding: theme.spacing(2),\r\n  //   textAlign: 'center',\r\n  //   color: theme.palette.text.secondary,\r\n  // }));\r\n  \r\n  const allMonthValues = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\"\r\n  ];\r\n  \r\n  const [selectedDate, setSelectedDate] = useState();\r\n  const [calendarText, setCalendarText] = useState(`No Date is selected`);\r\n  const handleDateChange = (value) => {\r\n    setSelectedDate(value);\r\n    setCalendarText(`The selected Date is ${value.toDateString()}`);\r\n  };\r\n  const handleYearChange = (value) => {\r\n    const yearValue = value.getFullYear();\r\n    setCalendarText(`${yearValue} Year  is selected`);\r\n  };\r\n  const handleMonthChange = (value) => {\r\n    const monthValue = allMonthValues[value.getMonth()];\r\n    setCalendarText(`${monthValue} Month  is selected`);\r\n  };\r\n  // const [myEvents, setEvents] = React.useState([]);\r\n\r\n  //   React.useEffect(() => {\r\n  //       getJson('https://trial.mobiscroll.com/events/?vers=5', (events) => {\r\n  //           setEvents(events);\r\n  //       }, 'jsonp');\r\n  //   }, []);\r\n    \r\n  //   const onEventClick = React.useCallback((event) => {\r\n  //       toast({\r\n  //           message: event.event.title\r\n  //       });\r\n  //   }, []);\r\n    \r\n  //   const view = React.useMemo(() => {\r\n  //       return {\r\n  //           calendar: { type: 'month' },\r\n  //           agenda: { type: 'month' }\r\n  //       };\r\n  //   }, []);\r\n  const events = [\r\n    {\r\n      day : 7,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '15:00pm to 17:00pm',\r\n      weekDay : 'Thu'\r\n    },\r\n    {\r\n      day : 18,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '16:00pm to 18:00pm',\r\n      weekDay : 'Sat'\r\n    },\r\n    {\r\n      day : 22,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '16:00pm to 18:00pm',\r\n      weekDay : 'Wed'\r\n    },\r\n    {\r\n      day : 30,\r\n      title : 'Lorem Ipsum',\r\n      fromto : '16:00pm to 19:00pm',\r\n      weekDay : 'Wed'\r\n    },\r\n  ]\r\n  return (\r\n    <> \r\n    <Page   style={{backgroundColor:\"#171819\"}} paddingLeft=\"5px\" paddingRight=\"5px\">\r\n      <Box justifyContent=\"center\" display=\"flex\" marginBottom=\"30px\">\r\n          <Calendar\r\n          onClickMonth={handleMonthChange}\r\n          onClickYear={handleYearChange}\r\n          onChange={handleDateChange}\r\n          value={selectedDate}\r\n          />\r\n      </Box>\r\n      <Event events={events}/>\r\n      </Page>\r\n    </>\r\n  );\r\n}\r\nfunction Event(props){\r\n  return(\r\n    <>\r\n    <Box margintop=\"20px\">\r\n    {props.events.map((event) => (\r\n      <EventCard event={event}/>\r\n    ))}\r\n    </Box>\r\n    </>\r\n  );\r\n}\r\nfunction EventCard(props){\r\n  const event = props.event;\r\n  return(\r\n    <>\r\n    <Box display=\"flex\" justifyContent=\"center\" padding=\"0 10px\">\r\n      <Grid container marginBottom=\"20px\" backgroundColor=\"#232323\" borderRadius={1} padding=\"10px 20px\">\r\n        <Grid item xs={2} fontSize={16} color=\"white\">{event.day}</Grid>\r\n        <Grid item xs={10} fontSize={14} color=\"white\">{event.title}</Grid>\r\n        <Grid item xs={2} fontSize={12} color=\"#02FF7B\">{event.weekDay}</Grid>\r\n        <Grid item xs={10} fontSize={12} color=\"#02FF7B\">{event.fromto}</Grid>\r\n      </Grid>\r\n      </Box>\r\n    </>\r\n  );\r\n}"],"names":["PhoneCalendar","hash","useLocation","dispatch","useDispatch","account","useActiveWeb3React","_useState","useState","_useState2","_slicedToArray","tab","setTab","_useState3","_useState4","setIsLoading","network","useSelector","state","chainId","imgRef","useRef","useEffect","el","current","gsap","opacity","duration","scrollTrigger","trigger","start","toggleActions","unmounted","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getPools","stop","allMonthValues","_useState5","_useState6","selectedDate","setSelectedDate","_useState7","_useState8","setCalendarText","_jsx","_Fragment","children","_jsxs","Page","style","backgroundColor","paddingLeft","paddingRight","Box","justifyContent","display","marginBottom","Calendar","onClickMonth","value","monthValue","getMonth","concat","onClickYear","yearValue","getFullYear","onChange","toDateString","Event","events","day","title","fromto","weekDay","props","margintop","map","event","EventCard","padding","Grid","container","borderRadius","item","xs","fontSize","color"],"sourceRoot":""}